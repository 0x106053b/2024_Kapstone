,user_input,retrieved_contexts,response,reference,answer_relevancy,context_precision,faithfulness,context_recall,answer_correctness
0,What is definition of DBMS?,"['CHAPTER1IntroductionAdatabase-management system (DBMS)is a collection of interrelated data andas e to fp r o g r a m st oa c c e s st h o s ed a t a .T h ec o l l e c t i o no fd a t a ,u s u a l l yr e f e r r e dt oas thedatabase, contains information relevant to an enterprise. The primary goalof aDBMSis to provide a way to store and retrieve database information that isbothconvenientandefﬁcient.Database systems are designed to manage large bodies of information. Man-agement of data involves both deﬁning structures for storage of informationand providing mechanisms for the manipulation of information. In addition, thedatabase system must ensure the safety of the information stored, despite systemcrashes or attempts at unauthorized access. If data are to be shared among severalusers, the system must avoid possible anomalous results.Because information is so important in most organizations, computer scien-tists have developed a large body of concepts and techniques for managing', 'that do not ﬁt into the traditional data-processing framework.Among these applications are computer-aided design systems, knowledge-base and expert systems, systems that store data with complex data types (forexample, graphics data and audio data), and environment-modeling systems.Chapter 22 covers several of these applications.1.12.2 Database AdministratorOne of the main reasons for usingDBMSsi st oh a v ec e n t r a lc o n t r o lo fb o t ht h ed a t aand the programs that access those data. A person who has such central controlover the system is called adatabase administrator (DBA).T h ef u n c t i o n so faDBAinclude:•Schema deﬁnition.T h eDBAcreates the original database schema by execut-ing a set of data deﬁnition statements in theDDL.•Storage structure and access-method deﬁnition.•Schema and physical-organization modiﬁcation.T h eDBAcarries out changesto the schema and physical organization to reﬂect the changing needs of theorganization, or to alter the physical organization', 'these are now offered as Web services that can be used byapplication developers. There has also been substantial work on managementand analysis of streaming data, such as stock-market ticker data or computernetwork monitoring data. Data-mining techniques are now widely deployed;example applications include Web-based product-recommendation systemsand automatic placement of relevant advertisements on Web pages.1.14Summary•Adatabase-management system(DBMS)c o n s i s t so fac o l l e c t i o no fi n t e r r e -lated data and a collection of programs to access that data. The data describeone particular enterprise.•The primary goal of aDBMSis to provide an environment that is both conve-nient and efﬁcient for people to use in retrieving and storing information.•Database systems are ubiquitous today,and most people interact, either di-rectly or indirectly, with databases many times every day.•Database systems are designed to store large bodies of information. The man-agement of data', 'today,and most people interact, either di-rectly or indirectly, with databases many times every day.•Database systems are designed to store large bodies of information. The man-agement of data involves both the deﬁnition of structures for the storage ofinformation and the provision of mechanisms for the manipulation of infor-mation. In addition, the database system must provide for the safety of theinformation stored, in the face of system crashes or attempts at unauthorizedaccess. If data are to be shared among several users, the system must avoidpossible anomalous results.', 'exactly how to getthose data, are widely used today.•Adata-deﬁnition language (DDL)is a language for specifying the databaseschema and as well as other properties of the data.•Database design mainly involves thed e s i g no ft h ed a t a b a s es c h e m a .T h eentity-relationship (E-R)d a t am o d e li saw i d e l yu s e dd a t am o d e lf o rd a t a b a s edesign. It provides a convenient graphical representation to view data, rela-tionships, and constraints.•Ad a t a b a s es y s t e mh a ss e v e r a ls u b s y s t e m s .◦Thestorage managersubsystem provides the interface between the low-level data stored in the database and the application programs and queriessubmitted to the system.◦Thequery processorsubsystem compiles and executesDDLandDMLstatements.•Transaction managementensures that the database remains in a consistent(correct) state despite system failures. The transaction manager ensures thatconcurrent transaction executions proceed without conﬂicting.•The architecture of', '32Chapter 1Introduction•Am a j o rp u r p o s eo fad a t a b a s es y s t e mi st op r o v i d eu s e r sw i t ha na b s t r a c tview of the data. That is, the system hides certain details of how the data arestored and maintained.•Underlying the structure of a database is thedata model:ac o l l e c t i o no fconceptual tools for describing data, data relationships, data semantics, anddata constraints.•The relational data model is the most widely deployed model for storing datain databases. Other data models are the object-oriented model, the object-relational model, and semistructured data models.•Adata-manipulation language (DML)is a language that enables users toaccess or manipulate data. NonproceduralDMLs, which require a user tospecify only what data are needed, without specifying exactly how to getthose data, are widely used today.•Adata-deﬁnition language (DDL)is a language for specifying the databaseschema and as well as other properties of the data.•Database design mainly']",A database-management system (DBMS) is a collection of interrelated data and a collection of programs to access that data. The primary goal of a DBMS is to provide an environment that is both convenient and efficient for people to use in retrieving and storing information. Database systems are designed to manage large bodies of information.,A database-management system (DBMS) is a collection of interrelated data and a set of programs to access those data.,0.8771946048586013,0.9999999999833333,0.6,1.0,0.6182324975631411
1,Please tell me some representative examples of Database applications.,"['of a query.Exercises1.7List four applications you have used that most likely employed a databasesystem to store persistent data.1.8List four signiﬁcant differences between a ﬁle-processing system and aDBMS.1.9Explain the concept of physical data independence, and its importance indatabase systems.1.10List ﬁve responsibilities of a database-management system. For each re-sponsibility, explain the problems that would arise if the responsibilitywere not discharged.1.11List at least two reasons why database systems support data manipulationusing a declarative query language such asSQL,i n s t e a do fj u s tp r o v i d i n gaal i b r a r yo fCo rC + +f u n c t i o n st oc a r r yo u td a t am a n i p u l a t i o n .1.12Explain what problems are caused by the design of the table in Figure 1.4.1.13What are ﬁve main functions of a database administrator?1.14Explain the difference between two-tier and three-tier architectures. Whichis better suited for Web applications? Why?1.15Describe at', '1.6Database Design15Examples in a university system are programs that allow students to register forcourses, generate class rosters, calculate studentGPA,g e n e r a t ep a y r o l lc h e c k s ,e t c .To access the database,DMLstatements need to be executed from the hostlanguage. There are two ways to do this:•By providing an application program interface (set of procedures) that canbe used to sendDMLandDDLstatements to the database and retrieve theresults.The Open Database Connectivity (ODBC)s t a n d a r df o ru s ew i t ht h eClanguage is a commonly used application program interface standard. TheJava Database Connectivity (JDBC)s t a n d a r dp r o v i d e sc o r r e s p o n d i n gf e a t u r e sto the Java language.•By extending the host language syntax to embedDMLcalls within the hostlanguage program. Usually, a special character prefacesDMLcalls, and apreprocessor, called theDMLprecompiler,c o n v e r t st h eDMLstatements tonormal procedure calls in the host', '24Chapter 1IntroductionDatabase applications are usually partitioned into two or three parts, as inFigure 1.6. In atwo-tier architecture,t h ea p p l i c a t i o nr e s i d e sa tt h ec l i e n tm a c h i n e ,where it invokes database system functionality at the server machine throughnaive users(tellers, agents, web users)\nquery processor\nstorage managerdisk storageindicesstatistical datadatadata dictionaryapplicationprogrammersapplicationinterfaces\napplicationprogramobject codecompiler andlinker\nbuﬀer managerﬁle managerauthorizationand integrity managertransactionmanagerDML compiler and organizerquery evaluationengineDML queriesDDL interpreterapplicationprogramsquerytoolsadministrationtoolssophisticatedusers(analysts)databaseadministratorsusewriteuseuse\nFigure 1.5System structure.', 'that do not ﬁt into the traditional data-processing framework.Among these applications are computer-aided design systems, knowledge-base and expert systems, systems that store data with complex data types (forexample, graphics data and audio data), and environment-modeling systems.Chapter 22 covers several of these applications.1.12.2 Database AdministratorOne of the main reasons for usingDBMSsi st oh a v ec e n t r a lc o n t r o lo fb o t ht h ed a t aand the programs that access those data. A person who has such central controlover the system is called adatabase administrator (DBA).T h ef u n c t i o n so faDBAinclude:•Schema deﬁnition.T h eDBAcreates the original database schema by execut-ing a set of data deﬁnition statements in theDDL.•Storage structure and access-method deﬁnition.•Schema and physical-organization modiﬁcation.T h eDBAcarries out changesto the schema and physical organization to reﬂect the changing needs of theorganization, or to alter the physical organization', 'these are now offered as Web services that can be used byapplication developers. There has also been substantial work on managementand analysis of streaming data, such as stock-market ticker data or computernetwork monitoring data. Data-mining techniques are now widely deployed;example applications include Web-based product-recommendation systemsand automatic placement of relevant advertisements on Web pages.1.14Summary•Adatabase-management system(DBMS)c o n s i s t so fac o l l e c t i o no fi n t e r r e -lated data and a collection of programs to access that data. The data describeone particular enterprise.•The primary goal of aDBMSis to provide an environment that is both conve-nient and efﬁcient for people to use in retrieving and storing information.•Database systems are ubiquitous today,and most people interact, either di-rectly or indirectly, with databases many times every day.•Database systems are designed to store large bodies of information. The man-agement of data', 'databases still form the core of a vast majority of large-scaledatabase applications. In this time period we have also witnessed the growthin“autonomic-computing/auto-admin”techniques for minimizing systemadministration effort. This period also saw a signiﬁcant growth in use ofopen-source database systems, particularlyPostgreSQLandMySQL.The latter part of the decade has seen growth in specialized databases fordata analysis, in particular column-stores, which in effect store each columnof a table as a separate array, and highly parallel database systems designedfor analysis of very large data sets. Several novel distributed data-storagesystems have been built to handle the data management requirements of verylarge Web sites such as Amazon, Facebook, Google, Microsoft and Yahoo!,and some of these are now offered as Web services that can be used byapplication developers. There has also been substantial work on managementand analysis of streaming data, such as stock-market ticker data or']","Some representative examples of database applications include programs for student registration in universities, generating class rosters, calculating student GPA, and generating payroll checks. These applications rely on database systems to store and manage persistent data efficiently. Additionally, computer-aided design systems, knowledge-base and expert systems, and systems storing complex data types like graphics and audio data are also examples of database applications.","Database can be used for Enterprise Information, Banking and Finance, Universities, Airlines and Telecommunication so on.",0.9715061222547225,0.4166666666458333,1.0,1.0,0.21323911604136034
2,What kinds of data storage is used in 1950s?,"['data from tapesand card decks.•Late 1960s and 1970s:W i d e s p r e a du s eo fh a r dd i s k si nt h el a t e1 9 6 0 sc h a n g e dthe scenario for data processing greatly, since hard disks allowed direct accessto data. The position of data on disk was immaterial, since any location ondisk could be accessed in just tens of milliseconds. Data were thus freed from', 'database and ensuring that performanceis not degraded by very expensive tasks submitted by some users.1.13History of Database SystemsInformation processing drives the growth of computers, as it has from the earli-est days of commercial computers. In fact, automation of data processing taskspredates computers. Punched cards, invented by Herman Hollerith, were usedat the very beginning of the twentieth century to record U.S. census data, andmechanical systems were used to process the cards and tabulate results. Punchedcards were later widely used as a means of entering data into computers.Techniques for data storage and processing have evolved over the years:•1950s and early 1960s:M a g n e t i ct a p e sw e r ed e v e l o p e df o rd a t as t o r a g e .D a t aprocessing tasks such as payroll were automated, with data stored on tapes.Processing of data consisted of reading data from one or more tapes andwriting data to a new tape. Data could also be input from punched carddecks, and', 'were automated, with data stored on tapes.Processing of data consisted of reading data from one or more tapes andwriting data to a new tape. Data could also be input from punched carddecks, and output to printers. For example, salary raises were processed byentering the raises on punched cards and reading the punched card deck insynchronization with a tape containing the master salary details. The recordshad to be in the same sorted order. The salary raises would be added to thesalary read from the master tape, and written to a new tape; the new tapewould become the new master tape.Tapes (and card decks) could be read only sequentially, and data sizes weremuch larger than main memory; thus, data processing programs were forcedto process data in a particular order, by reading and merging data from tapesand card decks.•Late 1960s and 1970s:W i d e s p r e a du s eo fh a r dd i s k si nt h el a t e1 9 6 0 sc h a n g e dthe scenario for data processing greatly, since hard disks allowed', 'databases still form the core of a vast majority of large-scaledatabase applications. In this time period we have also witnessed the growthin“autonomic-computing/auto-admin”techniques for minimizing systemadministration effort. This period also saw a signiﬁcant growth in use ofopen-source database systems, particularlyPostgreSQLandMySQL.The latter part of the decade has seen growth in specialized databases fordata analysis, in particular column-stores, which in effect store each columnof a table as a separate array, and highly parallel database systems designedfor analysis of very large data sets. Several novel distributed data-storagesystems have been built to handle the data management requirements of verylarge Web sites such as Amazon, Facebook, Google, Microsoft and Yahoo!,and some of these are now offered as Web services that can be used byapplication developers. There has also been substantial work on managementand analysis of streaming data, such as stock-market ticker data or', '30Chapter 1Introductionthe tyranny of sequentiality. With disks, network and hierarchical databasescould be created that allowed data structures such as lists and trees to bestored on disk. Programmers could construct and manipulate these datastructures.Al a n d m a r kp a p e rb yC o d d[ 1 9 7 0 ]d e ﬁ n e dt h er e l a t i o n a lm o d e la n dnonprocedural ways of querying data in the relational model, and relationaldatabases were born. The simplicity of the relational model and the possibilityof hiding implementation details completely from the programmer wereenticing indeed. Codd later won the prestigious Association of ComputingMachinery Turing Award for his work.•1980s:A l t h o u g ha c a d e m i c a l l yi n t e r e s t i n g ,t h er e l a t i o n a lm o d e lw a sn o tu s e din practice initially, because of its perceived performance disadvantages; rela-tional databases could not match the performance of existing network and hi-erarchical databases. That changed with System', 'the relational model has reigned supreme among data models.The 1980s also saw much research on parallel and distributed databases,as well as initial work on object-oriented databases.•Early 1990s:T h eSQLlanguage was designed primarily for decision supportapplications, which are query-intensive, yet the mainstay of databases in the1980s was transaction-processing applications, which are update-intensive.Decision support and querying re-emerged as a major application area fordatabases. Tools for analyzing large amounts of data saw large growths inusage.Many database vendors introduced parallel database products in thisperiod. Database vendors also began to add object-relational support to theirdatabases.']","In the 1950s, magnetic tapes were developed for data storage. Data processing tasks such as payroll were automated, with data stored on tapes. Additionally, data could also be input from punched card decks for processing.","Magnetic tapes were developed for data storage. Data processing tasks such as payroll were automated, with data stored on tapes.",0.8802678981691329,0.6388888888675925,1.0,1.0,0.8060144466135112
3,Relational model concept is defined by whom? Please tell me his/her name.,"['character) may be usedto delimit records. The relational model hides such low-level implementationdetails from database developers and users.We also note that it is possible to create schemas in the relational model thathave problems such as unnecessarily duplicated information. For example, sup-pose we store the departmentbudgetas an attribute of theinstructorrecord. Then,whenever the value of a particular budget (say that one for the Physics depart-ment) changes, that change must to be reﬂected in the records of all instructors', 'RELATIONALDATABASESAd a t am o d e li sac o l l e c t i o no fc o n c e p t u a lt o o l sf o rd e s c r i b i n gd a t a ,d a t ar e l a t i o n -ships, data semantics, and consistency constraints. In this part, we focus on therelational model.The relational model, which is covered in Chapter 2, uses a collection of tablesto represent both data and the relationships among those data. Its conceptualsimplicity has led to its widespread adoption; today a vast majority of databaseproducts are based on the relational model. The relational model describes data atthe logical and view levels, abstracting away low-level details of data storage. Theentity-relationship model, discussed later in Chapter 7 (in Part 2), is a higher-leveldata model which is widely used for database design.To make data from a relational database available to users, we have to ad-dress several issues. The most important issue is how users specify requests forretrieving and updating data; several query languages have', 'type. Therelational data model is the most widely used data model, and a vast major-ity of current database systems are based on the relational model. Chapters 2through 8 cover the relational model in detail.•Entity-Relationship Model.T h ee n t i t y - r e l a t i o n s h i p(E-R)d a t am o d e lu s e sacollection of basic objects, calledentities,a n drelationshipsamong these objects.An entity is a“thing”or“object”in the real world that is distinguishablefrom other objects. The entity-relationship model is widely used in databasedesign, and Chapter 7 explores it in detail.•Object-Based Data Model.O b j e c t - o r i e n t e dp r o g r a m m i n g( e s p e c i a l l yi nJ a v a ,C++, or C#) has become the dominant software-development methodology.This led to the development of an object-oriented data model that can beseen as extending theE-Rmodel with notions of encapsulation, methods(functions), and object identity. The object-relational data model combinesfeatures of the', 'id(the time slot when theclass meets).•The department has a list of teaching assignments specifying, for each in-structor, the sections the instructor is teaching.•The university has a list of all student course registrations, specifying, foreach student, the courses and the associated sections that the student hastaken (registered for).Ar e a lu n i v e r s i t yd a t a b a s ew o u l db em u c hm o r ec o m p l e xt h a nt h ep r e c e d i n gdesign. However we use this simpliﬁed model to help you understand conceptualideas without getting lost in details of a complex design.1.6.3 The Entity-Relationship ModelThe entity-relationship (E-R)d a t am o d e lu s e sac o l l e c t i o no fb a s i co b j e c t s ,c a l l e dentities,a n drelationshipsamong these objects. An entity is a“thing”or“object”in the real world that is distinguishablef r o mo t h e ro b j e c t s .F o re x a m p l e ,e a c hperson is an entity, and bank accounts can be considered as entities.Entities are described', 't l ei n t r o d u c t i o nt ot h efundamentals of the relational model. Most commercial relational database sys-tems employ theSQLlanguage, which we cover in great detail in Chapters 3, 4,and 5. In Chapter 6 we discuss other inﬂuential languages.1.5.1 TablesEach table has multiple columns and each column has a unique name. Figure 1.2presents a sample relational database comprising two tables: one shows detailsof university instructors and the other shows details of the various universitydepartments.The ﬁrst table, theinstructortable, shows, for example, that an instructornamed Einstein withID22222 is a member of the Physics department and has anannual salary of $95,000. The second table,department,s h o w s ,f o re x a m p l e ,t h a tthe Biology department is located in the Watson building and has a budget of$90,000. Of course, a real-world university would have many more departmentsand instructors. We use small tables in the text to illustrate concepts. A largerexample for the', 'the set of all relationships of the same type are termed anentity setandrelationship set,r e s p e c t i v e l y .The overall logical structure (schema) of a database can be expressed graph-ically by anentity-relationship (E-R)d i a g r a m.T h e r ea r es e v e r a lw a y si nw h i c ht odraw these diagrams. One of the most popular is to use theUniﬁed ModelingLanguage (UML).I nt h en o t a t i o nw eu s e ,w h i c hi sb a s e do nUML,a nE-Rdiagramis represented as follows:']",The relational model concept is defined by E.F. Codd.,"A landmark paper by Codd [1970] defined the relational model and nonprocedural ways of querying data in the relational model, and relational databases were born.",0.9136994998827673,0.9999999999666667,0.0,0.0,0.5224320317592499
4,What is DML and DDL?,"['10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '12Chapter 1IntroductionTheDDL,j u s tl i k ea n yo t h e rp r o g r a m m i n gl a n g u a g e ,g e t sa si n p u ts o m einstructions (statements) and generates some output. The output of theDDLisplaced in thedata dictionary,w h i c hc o n t a i n smetadata—thatis,dataaboutdata.The data dictionary is considered to be a special type of table that can only beaccessed and updated by the database system itself (not a regular user). Thedatabase system consults the data dictionary before reading or modifying actualdata.1.5Relational DatabasesAr e l a t i o n a ld a t a b a s ei sb a s e do nt h er e l a t i o n a lm o d e la n du s e sac o l l e c t i o no ftables to represent both data and the relationships among those data. It also in-cludes aDMLandDDL.I nC h a p t e r2w ep r e s e n tag e n t l ei n t r o d u c t i o nt ot h efundamentals of the relational model. Most commercial relational database sys-tems employ theSQLlanguage, which we cover in great detail in Chapters 3, 4,and 5. In', '32Chapter 1Introduction•Am a j o rp u r p o s eo fad a t a b a s es y s t e mi st op r o v i d eu s e r sw i t ha na b s t r a c tview of the data. That is, the system hides certain details of how the data arestored and maintained.•Underlying the structure of a database is thedata model:ac o l l e c t i o no fconceptual tools for describing data, data relationships, data semantics, anddata constraints.•The relational data model is the most widely deployed model for storing datain databases. Other data models are the object-oriented model, the object-relational model, and semistructured data models.•Adata-manipulation language (DML)is a language that enables users toaccess or manipulate data. NonproceduralDMLs, which require a user tospecify only what data are needed, without specifying exactly how to getthose data, are widely used today.•Adata-deﬁnition language (DDL)is a language for specifying the databaseschema and as well as other properties of the data.•Database design mainly', 'name,building,a n dbudget,e a c ho fw h i c hh a sas p e c i ﬁ cd a t at y p eassociated with it. We discuss data types in more detail in Chapter 3. In addition,theDDLstatement updates the data dictionary, which contains metadata (seeSection 1.4.2). The schema of a table is an example of metadata.1.5.4 Database Access from Application ProgramsSQLis not as powerful as a universal Turing machine; that is, there are somecomputations that are possible using a general-purpose programming languagebut are not possible usingSQL.SQLalso does not support actions such as inputfrom users, output to displays, or communication over the network. Such com-putations and actions must be written in ahostlanguage, such as C, C++, or Java,with embeddedSQLqueries that access the data in the database.Applicationprogramsare programs that are used to interact with the database in this fashion.', 'exactly how to getthose data, are widely used today.•Adata-deﬁnition language (DDL)is a language for specifying the databaseschema and as well as other properties of the data.•Database design mainly involves thed e s i g no ft h ed a t a b a s es c h e m a .T h eentity-relationship (E-R)d a t am o d e li saw i d e l yu s e dd a t am o d e lf o rd a t a b a s edesign. It provides a convenient graphical representation to view data, rela-tionships, and constraints.•Ad a t a b a s es y s t e mh a ss e v e r a ls u b s y s t e m s .◦Thestorage managersubsystem provides the interface between the low-level data stored in the database and the application programs and queriessubmitted to the system.◦Thequery processorsubsystem compiles and executesDDLandDMLstatements.•Transaction managementensures that the database remains in a consistent(correct) state despite system failures. The transaction manager ensures thatconcurrent transaction executions proceed without conﬂicting.•The architecture of', '1.6Database Design15Examples in a university system are programs that allow students to register forcourses, generate class rosters, calculate studentGPA,g e n e r a t ep a y r o l lc h e c k s ,e t c .To access the database,DMLstatements need to be executed from the hostlanguage. There are two ways to do this:•By providing an application program interface (set of procedures) that canbe used to sendDMLandDDLstatements to the database and retrieve theresults.The Open Database Connectivity (ODBC)s t a n d a r df o ru s ew i t ht h eClanguage is a commonly used application program interface standard. TheJava Database Connectivity (JDBC)s t a n d a r dp r o v i d e sc o r r e s p o n d i n gf e a t u r e sto the Java language.•By extending the host language syntax to embedDMLcalls within the hostlanguage program. Usually, a special character prefacesDMLcalls, and apreprocessor, called theDMLprecompiler,c o n v e r t st h eDMLstatements tonormal procedure calls in the host']","DML stands for Data Manipulation Language, which enables users to access or manipulate data in a database. It includes operations like retrieval, insertion, deletion, and modification of data. DDL stands for Data Definition Language, used for specifying the database schema and properties of the data.",A data-manipulation language (DML) is a language that enables users to access or manipulate data. And a data-definition language (DDL) is a language for specifying the database schema and as well as other properties of the data.,0.9119900078031217,0.9999999999833333,1.0,1.0,0.7017063658127765
5,Please briefly introduce the disadvantages of managing structural data using the file system.,"['4Chapter 1Introduction•Data redundancy and inconsistency.S i n c ed i f f e r e n tp r o g r a m m e r sc r e a t ethe ﬁles and application programs over a long period, the various ﬁles arelikely to have different structures and the programs may be written in severalprogramming languages. Moreover, the same information may be duplicatedin several places (ﬁles). For example, if a student has a double major (say,music and mathematics) the address and telephone number of that studentmay appear in a ﬁle that consists of student records of students in the Musicdepartment and in a ﬁle that consists of student records of students in theMathematics department. This redundancy leads to higher storage and accesscost. In addition, it may lead todata inconsistency;t h a ti s ,t h ev a r i o u sc o p i e sof the same data may no longer agree. For example, a changed student addressmay be reﬂected in the Music department records but not elsewhere in thesystem.•Difﬁculty in accessing data.S u p p o s', '34Chapter 1Introduction1.3List six major steps that you would take in setting up a database for aparticular enterprise.1.4List at least 3 different types of information that a university would main-tain, beyond those listed in Section 1.6.2.1.5Suppose you want to build a video site similar to YouTube. Consider eachof the points listed in Section 1.2, as disadvantages of keeping data in aﬁle-processing system. Discuss the relevance of each of these points to thestorage of actual video data, and to metadata about the video, such as title,the user who uploaded it, tags, and which users viewed it.1.6Keyword queries used in Web search are quite different from databasequeries. List key differences between the two, in terms of the way thequeries are speciﬁed, and in terms of what is the result of a query.Exercises1.7List four applications you have used that most likely employed a databasesystem to store persistent data.1.8List four signiﬁcant differences between a ﬁle-processing system and', 'Both alternatives are obviously unsatisfactory. Supposethat such a program is written, and that, several days later, the same clerkneeds to trim that list to include only those students who have taken at least60 credit hours. As expected, a program to generate such a list does notexist. Again, the clerk has the preceding two options, neither of which issatisfactory.The point here is that conventional ﬁle-processing environments do notallow needed data to be retrieved in a convenient and efﬁcient manner. Moreresponsive data-retrieval systems are required for general use.•Data isolation. Because data are scattered in various ﬁles, and ﬁles maybe in different formats, writing new application programs to retrieve theappropriate data is difﬁcult.•Integrity problems.T h ed a t av a l u e ss t o r e di nt h ed a t a b a s em u s ts a t i s f yc e r -tain types ofconsistency constraints.S u p p o s et h eu n i v e r s i t ym a i n t a i n sa naccount for each department, and records the', 'independence•Data models◦Entity-relationship model◦Relational data model◦Object-based data model◦Semistructured data model•Database languages◦Data-deﬁnition language◦Data-manipulation language◦Query language•Metadata•Application program•Normalization•Data dictionary•Storage manager•Query processor•Transactions◦Atomicity◦Failure recovery◦Concurrency control•Two- and three-tier database archi-tectures•Data mining•Database administrator (DBA)Practice Exercises1.1This chapter has described several major advantages of a database system.What are two disadvantages?1.2List ﬁve ways in which the type declaration system of a language such asJava or C++ differs from the data deﬁnition language used in a database.', 'additionalconstructs to support data analysis.Large companies have diverse sources of data that they need to use for makingbusiness decisions. To execute queries efﬁciently on such diverse data, companieshave builtdata warehouses.D a t aw a r e h o u s e sg a t h e rd a t af r o mm u l t i p l es o u r c e sunder a uniﬁed schema, at a single site.T h u s ,t h e yp r o v i d et h eu s e ras i n g l euniform interface to data.Textual data, too, has grown explosively. Textual data is unstructured, unlikethe rigidly structured data in relational databases. Querying of unstructuredtextual data is referred to asinformation retrieval.I n f o r m a t i o nr e t r i e v a ls y s t e m shave much in common with database systems—in particular, the storage andretrieval of data on secondary storage. However, the emphasis in the ﬁeld ofinformation systems is different from that in database systems, concentrating onissues such as querying based on keywords; the relevance of documents to thequery;', '6Chapter 1IntroductionThese difﬁculties, among others, prompted the development of database sys-tems. In what follows, we shall see the concepts and algorithms that enabledatabase systems to solve the problems with ﬁle-processing systems. In most ofthis book, we use a university organization as a running example of a typicaldata-processing application.1.3View of DataAd a t a b a s es y s t e mi sac o l l e c t i o no fi n t e r r e l a t e dd a t aa n das e to fp r o g r a m st h a tallow users to access and modify these data. A major purpose of a databasesystem is to provide users with anabstractview of the data. That is, the systemhides certain details of how the data are stored and maintained.1.3.1 Data AbstractionFor the system to be usable, it must retrieve data efﬁciently. The need for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users']","Managing structural data using the file system can lead to data redundancy and inconsistency, as different programs may create files with varying structures and duplicate information in multiple places. It can also result in difficulty accessing data, as scattered files in different formats make it challenging to write new application programs for data retrieval. Additionally, data isolation and integrity problems may arise due to the lack of a centralized database system.","File system may have data redundancy and inconsistency, difficulty in accessing data, data isolation problem, integrity problem, atomcity problem, and concurrent access anomalies.",0.9327852609526327,0.9666666666473333,1.0,0.6666666666666666,0.5711564107753522
6,Please tell me specifically about the atomity problem in the file system.,"['t o r e di nt h ed a t a b a s em u s ts a t i s f yc e r -tain types ofconsistency constraints.S u p p o s et h eu n i v e r s i t ym a i n t a i n sa naccount for each department, and records the balance amount in each ac-count. Suppose also that the universityrequires that the account balance of adepartment may never fall below zero. Developers enforce these constraintsin the system by adding appropriate code in the various application pro-grams. However, when new constraints are added, it is difﬁcult to changethe programs to enforce them. The problem is compounded when constraintsinvolve several data items from different ﬁles.•Atomicity problems.Ac o m p u t e rs y s t e m ,l i k ea n yo t h e rd e v i c e ,i ss u b j e c tto failure. In many applications, it is crucial that, if a failure occurs, the data', 'arise in a distributed database, and describes how to dealwith each issue. The issues include how to store data, how to ensure atomicity oftransactions that execute at multiple sites, how to perform concurrency control,and how to provide high availability in the presence of failures. Distributed queryprocessing and directory systems are also described in this chapter.Most users of a database system today are not present at the site of thedatabase system, but connect to it through a network. We can therefore differen-tiate betweenclientmachines, on which remote database users work, andservermachines, on which the database system runs.', '1.2Purpose of Database Systems5be restored to the consistent state thatexisted prior to the failure. Considerap r o g r a mt ot r a n s f e r$ 5 0 0f r o mt h ea c c o u n tb a l a n c eo fd e p a r t m e n tAtothe account balance of departmentB. If a system failure occurs during theexecution of the program, it is possible that the $500 was removed from thebalance of departmentAbut was not credited to the balance of departmentB,resulting in an inconsistent database state. Clearly, it is essential to databaseconsistency that either both the credit and debit occur, or that neither occur.That is, the funds transfer must beatomic—it must happen in its entirety ornot at all. It is difﬁcult to ensure atomicity in a conventional ﬁle-processingsystem.•Concurrent-access anomalies.F o rt h es a k eo fo v e r a l lp e r f o r m a n c eo ft h es y s -tem and faster response, many systems allow multiple users to update thedata simultaneously. Indeed, today, the largest Internet retailers may', 'n da n o t h e rd e p a r t m e n ta c c o u n t( s a yB)i sc r e d i t e d .C l e a r l y ,i tis essential that either both the credit andd e b i to c c u r ,o rt h a tn e i t h e ro c c u r .T h a tis, the funds transfer must happen in its entirety or not at all. This all-or-nonerequirement is calledatomicity.I na d d i t i o n ,i ti se s s e n t i a lt h a tt h ee x e c u t i o no ft h efunds transfer preserve the consistency of the database. That is, the value of thesum of the balances ofAandBmust be preserved. This correctness requirementis calledconsistency.F i n a l l y ,a f t e rt h es u c c e s s f u le x e c u t i o no faf u n d st r a n s f e r ,the new values of the balances of accountsAandBmust persist, despite thepossibility of system failure. This persistence requirement is calleddurability.Atransactionis a collection of operations that performs a single logicalfunction in a database application. Each transaction is a unit of both atomicityand consistency. Thus, we', 'consistency of the database. For example, thetransaction to transfer funds from the account of departmentAto the account ofdepartmentBcould be deﬁned to be composed of two separate programs: onethat debits accountA,a n da n o t h e rt h a tc r e d i t sa c c o u n tB.T h ee x e c u t i o no ft h e s etwo programs one after the other will indeed preserve consistency. However, eachprogram by itself does not transform the database from a consistent state to a newconsistent state. Thus, those programs are not transactions.Ensuring the atomicity and durability properties is the responsibility of thedatabase system itself—speciﬁcally, of therecovery manager.I nt h ea b s e n c eo ffailures, all transactions complete successfully, and atomicity is achieved easily.', 'Both alternatives are obviously unsatisfactory. Supposethat such a program is written, and that, several days later, the same clerkneeds to trim that list to include only those students who have taken at least60 credit hours. As expected, a program to generate such a list does notexist. Again, the clerk has the preceding two options, neither of which issatisfactory.The point here is that conventional ﬁle-processing environments do notallow needed data to be retrieved in a convenient and efﬁcient manner. Moreresponsive data-retrieval systems are required for general use.•Data isolation. Because data are scattered in various ﬁles, and ﬁles maybe in different formats, writing new application programs to retrieve theappropriate data is difﬁcult.•Integrity problems.T h ed a t av a l u e ss t o r e di nt h ed a t a b a s em u s ts a t i s f yc e r -tain types ofconsistency constraints.S u p p o s et h eu n i v e r s i t ym a i n t a i n sa naccount for each department, and records the']","The atomicity problem in the file system refers to the challenge of ensuring that operations either happen in their entirety or not at all, especially in the event of system failures. For example, if a funds transfer program debits one account but fails to credit another due to a system failure, it results in an inconsistent database state. This highlights the importance of atomicity in maintaining database consistency and integrity.","A computer system, like any other device, is subject to failure. In many applications, it is crucial that, if a failure occurs, the data be restored to the consistent state that existed prior to the failure. But usual file system doesn't guarantee this atomcity.",0.9099050014419833,0.8333333332916666,1.0,0.6666666666666666,0.6460690460626572
7,how database system hides certain details of how data are stored?,"['6Chapter 1IntroductionThese difﬁculties, among others, prompted the development of database sys-tems. In what follows, we shall see the concepts and algorithms that enabledatabase systems to solve the problems with ﬁle-processing systems. In most ofthis book, we use a university organization as a running example of a typicaldata-processing application.1.3View of DataAd a t a b a s es y s t e mi sac o l l e c t i o no fi n t e r r e l a t e dd a t aa n das e to fp r o g r a m st h a tallow users to access and modify these data. A major purpose of a databasesystem is to provide users with anabstractview of the data. That is, the systemhides certain details of how the data are stored and maintained.1.3.1 Data AbstractionFor the system to be usable, it must retrieve data efﬁciently. The need for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users', 'for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users through several levels of abstraction, to simplify users’interactions with the system:•Physical level.T h el o w e s tl e v e lo fa b s t r a c t i o nd e s c r i b e showthe data are ac-tually stored. The physical level describes complex low-level data structuresin detail.•Logical level.T h en e x t - h i g h e rl e v e lo fa b s t r a c t i o nd e s c r i b e swhatdata arestored in the database, and what relationships exist among those data. Thelogical level thus describes the entire database in terms of a small number ofrelatively simple structures. Althoughimplementation of the simple struc-tures at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a', '8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', 'today,and most people interact, either di-rectly or indirectly, with databases many times every day.•Database systems are designed to store large bodies of information. The man-agement of data involves both the deﬁnition of structures for the storage ofinformation and the provision of mechanisms for the manipulation of infor-mation. In addition, the database system must provide for the safety of theinformation stored, in the face of system crashes or attempts at unauthorizedaccess. If data are to be shared among several users, the system must avoidpossible anomalous results.', 'and how to obtain desirable de-signs. Chapter 8 covers relational-database design, including normalization.1.7Data Storage and QueryingAd a t a b a s es y s t e mi sp a r t i t i o n e di n t om o d u l e st h a td e a lw i t he a c ho ft h er e -sponsibilities of the overall system. The functional components of a databasesystem can be broadly divided into the storage manager and the query processorcomponents.The storage manager is important because databases typically require a largeamount of storage space. Corporate databases range in size from hundreds ofgigabytes to, for the largest databases, terabytes of data. A gigabyte is approxi-mately 1000 megabytes (actually 1024) (1 billion bytes), and a terabyte is 1 millionmegabytes (1 trillion bytes). Since the main memory of computers cannot storethis much information, the information is stored on disks. Data are moved be-tween disk storage and main memory as needed. Since the movement of datato and from disk is slow relative to the', 'the system must avoid possible anomalous results.Because information is so important in most organizations, computer scien-tists have developed a large body of concepts and techniques for managing data.These concepts and techniques form the focus of this book. This chapter brieﬂyintroduces the principles of database systems.1.1Database-System ApplicationsDatabases are widely used. Here are some representative applications:•Enterprise Information◦Sales:F o rc u s t o m e r ,p r o d u c t ,a n dp u r c h a s ei n f o r m a t i o n .◦Accounting: For payments, receipts, account balances, assets and otheraccounting information.◦Human resources:F o ri n f o r m a t i o na b o u te m p l o y e e s ,s a l a r i e s ,p a y r o l lt a x e s ,and beneﬁts, and for generation of paychecks.◦Manufacturing:F o rm a n a g e m e n to ft h es u p p l yc h a i na n df o rt r a c k i n gp r o -duction of items in factories, inventories of items in warehouses and stores,and orders for items.1']","Database systems hide certain details of how data are stored through data abstraction. This involves using multiple levels of abstraction, such as the physical level and logical level, to simplify users' interactions with the system. By providing an abstract view of the data, users can access and modify data without needing to understand the complex low-level data structures.",Database system provides users with an abstract view of the data.,0.8789223547025226,0.9666666666473333,1.0,1.0,0.7299277640834916
8,Please briefly introduce the 3 levels of data abstraction.,"['1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot', 'at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages', 'system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages mayclarify the distinction among levels of abstraction. Many high-level programming', '8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', 'levels of abstraction that we discussed in Section 1.3 apply not onlyto deﬁning or structuring data, but also to manipulating data. At the physicallevel, we must deﬁne algorithms that allow efﬁcient access to data. At higherlevels of abstraction, we emphasize ease of use. The goal is to allow humansto interact efﬁciently with the system. The query processor component of thedatabase system (which we study in Chapters 12 and 13) translatesDMLqueriesinto sequences of actions at the physical level of the database system.1.4.2 Data-Deﬁnition LanguageWe specify a database schema by a set of deﬁnitions expressed by a speciallanguage called adata-deﬁnition language(DDL). TheDDLis also used to specifyadditional properties of the data.', 'for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users through several levels of abstraction, to simplify users’interactions with the system:•Physical level.T h el o w e s tl e v e lo fa b s t r a c t i o nd e s c r i b e showthe data are ac-tually stored. The physical level describes complex low-level data structuresin detail.•Logical level.T h en e x t - h i g h e rl e v e lo fa b s t r a c t i o nd e s c r i b e swhatdata arestored in the database, and what relationships exist among those data. Thelogical level thus describes the entire database in terms of a small number ofrelatively simple structures. Althoughimplementation of the simple struc-tures at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a']","The three levels of data abstraction are the physical level, logical level, and view level. The physical level describes how data is actually stored in complex low-level structures. The logical level defines what data is stored in the database and the relationships among that data, simplifying it into relatively simple structures. The view level provides an abstract view of the entire database to simplify user interactions with the system.","Database system hides the complexity from users through several levels of abstraction, to simplify users' interactions with the system. This abstraction hierarchy consists of physical level, logical level, and view level.",0.9684438799564871,0.8766666666491333,1.0,1.0,0.7380048302074369
9,What is the characteristic of logical level in data abstraction?,"['at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages', '1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot', '8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', 'for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users through several levels of abstraction, to simplify users’interactions with the system:•Physical level.T h el o w e s tl e v e lo fa b s t r a c t i o nd e s c r i b e showthe data are ac-tually stored. The physical level describes complex low-level data structuresin detail.•Logical level.T h en e x t - h i g h e rl e v e lo fa b s t r a c t i o nd e s c r i b e swhatdata arestored in the database, and what relationships exist among those data. Thelogical level thus describes the entire database in terms of a small number ofrelatively simple structures. Althoughimplementation of the simple struc-tures at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a', 'levels of abstraction that we discussed in Section 1.3 apply not onlyto deﬁning or structuring data, but also to manipulating data. At the physicallevel, we must deﬁne algorithms that allow efﬁcient access to data. At higherlevels of abstraction, we emphasize ease of use. The goal is to allow humansto interact efﬁciently with the system. The query processor component of thedatabase system (which we study in Chapters 12 and 13) translatesDMLqueriesinto sequences of actions at the physical level of the database system.1.4.2 Data-Deﬁnition LanguageWe specify a database schema by a set of deﬁnitions expressed by a speciallanguage called adata-deﬁnition language(DDL). TheDDLis also used to specifyadditional properties of the data.', 'system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages mayclarify the distinction among levels of abstraction. Many high-level programming']","The logical level in data abstraction describes what data is stored in the database and the relationships among that data in relatively simple structures. It simplifies the complexity of how data is stored in the database, allowing users to interact with the system without needing to understand low-level data structures. The logical level provides a level of abstraction that hides the details of the physical-level data storage from users.","Logical level describes what data are stored in the database, and what relationships exist among those data. The logical level thus describes the entire database in terms of a small number of relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the user of the logical level does not need to be aware of this complexity. This is referred to as physical data independence.",0.9592033381754553,0.99999999998,1.0,1.0,0.6684820301486485
10,What is the other name for several schemas at the view level?,"['see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information is inserted and deleted. The collectionof information stored in the database at a particular moment is called aninstanceof the database. The overall design of the database is called the databaseschema.Schemas are changed infrequently, if at all.The concept of database schemas and instances can be understood by analogyto a program written in a programming language. A database schema correspondsto the variable declarations (along with associated type deﬁnitions) in a program.Each variable has a particular value at a given instant. The values of the variablesin a program at a point in time correspond to aninstanceof a database schema.Database systems have several schemas, partitioned according to the levelsof abstraction. Thephysical schemadescribes the database design at the physicallevel,', '8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', '1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot', 'to aninstanceof a database schema.Database systems have several schemas, partitioned according to the levelsof abstraction. Thephysical schemadescribes the database design at the physicallevel, while thelogical schemadescribes the database design at the logical level.Ad a t a b a s em a ya l s oh a v es e v e r a ls c h e m a sa tt h ev i e wl e v e l ,s o m e t i m e sc a l l e dsubschemas,t h a td e s c r i b ed i f f e r e n tv i e w so ft h ed a t a b a s e .Of these, the logical schema is by far the most important, in terms of its effecton application programs, since programmers construct applications by using thelogical schema. The physical schema is hidden beneath the logical schema, and canusually be changed easily without affecting application programs. Applicationprograms are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after', 'system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages mayclarify the distinction among levels of abstraction. Many high-level programming', 'are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after introducing the notion ofdata models in the next section.1.3.3 Data ModelsUnderlying the structure of a database is thedata model:ac o l l e c t i o no fc o n c e p t u a ltools for describing data, data relationships, data semantics, and consistencyconstraints. A data model provides a way to describe the design of a database atthe physical, logical, and view levels.']","At the view level, several schemas are sometimes called subschemas. Subschemas describe different views of the database, allowing users to interact with specific parts of the data without accessing the entire database schema. This provides a way to customize user access and hide certain details of the database structure.",We can call schemas at the view level as 'subschemas' instead.,0.8420999599068871,0.8541666666453125,0.8,1.0,0.47731227480207244
11,What is physical data indenpendence?,"['are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after introducing the notion ofdata models in the next section.1.3.3 Data ModelsUnderlying the structure of a database is thedata model:ac o l l e c t i o no fc o n c e p t u a ltools for describing data, data relationships, data semantics, and consistencyconstraints. A data model provides a way to describe the design of a database atthe physical, logical, and view levels.', 'at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages', 'for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users through several levels of abstraction, to simplify users’interactions with the system:•Physical level.T h el o w e s tl e v e lo fa b s t r a c t i o nd e s c r i b e showthe data are ac-tually stored. The physical level describes complex low-level data structuresin detail.•Logical level.T h en e x t - h i g h e rl e v e lo fa b s t r a c t i o nd e s c r i b e swhatdata arestored in the database, and what relationships exist among those data. Thelogical level thus describes the entire database in terms of a small number ofrelatively simple structures. Althoughimplementation of the simple struc-tures at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a', '4Chapter 1Introduction•Data redundancy and inconsistency.S i n c ed i f f e r e n tp r o g r a m m e r sc r e a t ethe ﬁles and application programs over a long period, the various ﬁles arelikely to have different structures and the programs may be written in severalprogramming languages. Moreover, the same information may be duplicatedin several places (ﬁles). For example, if a student has a double major (say,music and mathematics) the address and telephone number of that studentmay appear in a ﬁle that consists of student records of students in the Musicdepartment and in a ﬁle that consists of student records of students in theMathematics department. This redundancy leads to higher storage and accesscost. In addition, it may lead todata inconsistency;t h a ti s ,t h ev a r i o u sc o p i e sof the same data may no longer agree. For example, a changed student addressmay be reﬂected in the Music department records but not elsewhere in thesystem.•Difﬁculty in accessing data.S u p p o s', 'independence•Data models◦Entity-relationship model◦Relational data model◦Object-based data model◦Semistructured data model•Database languages◦Data-deﬁnition language◦Data-manipulation language◦Query language•Metadata•Application program•Normalization•Data dictionary•Storage manager•Query processor•Transactions◦Atomicity◦Failure recovery◦Concurrency control•Two- and three-tier database archi-tectures•Data mining•Database administrator (DBA)Practice Exercises1.1This chapter has described several major advantages of a database system.What are two disadvantages?1.2List ﬁve ways in which the type declaration system of a language such asJava or C++ differs from the data deﬁnition language used in a database.', 'to aninstanceof a database schema.Database systems have several schemas, partitioned according to the levelsof abstraction. Thephysical schemadescribes the database design at the physicallevel, while thelogical schemadescribes the database design at the logical level.Ad a t a b a s em a ya l s oh a v es e v e r a ls c h e m a sa tt h ev i e wl e v e l ,s o m e t i m e sc a l l e dsubschemas,t h a td e s c r i b ed i f f e r e n tv i e w so ft h ed a t a b a s e .Of these, the logical schema is by far the most important, in terms of its effecton application programs, since programmers construct applications by using thelogical schema. The physical schema is hidden beneath the logical schema, and canusually be changed easily without affecting application programs. Applicationprograms are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after']",Physical data independence refers to the characteristic where application programs do not depend on the physical schema of the database. This means that they do not need to be rewritten if changes occur in the physical schema. It allows for changes in the physical storage structures without affecting the application programs.,"e physical schema is hidden beneath the logical schema, and can usually be changed easily without affecting application programs.",0.9686376187410374,0.91666666664375,0.6666666666666666,1.0,0.6435797166021102
12,What is the differences between procedural DMLs and Declarative DMLs?,"['10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', 'are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have to specify how to get the data, thedatabase system has to ﬁgure out an efﬁcient means of accessing data.Aqueryis a statement requesting the retrieval of information. The portion ofaDMLthat involves information retrieval is called aquery language.A l t h o u g htechnically incorrect, it is common practice to use the termsquery languageanddata-manipulation languagesynonymously.There are a number of database query languages in use, either commerciallyor experimentally. We study the most widely used query language,SQL,i nC h a p -ters 3, 4, and 5. We also study some other query languages in Chapter 6.The levels of abstraction that we discussed in Section 1.3 apply not onlyto deﬁning or structuring data, but also to manipulating data. At the physicallevel, we must deﬁne algorithms that allow efﬁcient', 'name,building,a n dbudget,e a c ho fw h i c hh a sas p e c i ﬁ cd a t at y p eassociated with it. We discuss data types in more detail in Chapter 3. In addition,theDDLstatement updates the data dictionary, which contains metadata (seeSection 1.4.2). The schema of a table is an example of metadata.1.5.4 Database Access from Application ProgramsSQLis not as powerful as a universal Turing machine; that is, there are somecomputations that are possible using a general-purpose programming languagebut are not possible usingSQL.SQLalso does not support actions such as inputfrom users, output to displays, or communication over the network. Such com-putations and actions must be written in ahostlanguage, such as C, C++, or Java,with embeddedSQLqueries that access the data in the database.Applicationprogramsare programs that are used to interact with the database in this fashion.', '32Chapter 1Introduction•Am a j o rp u r p o s eo fad a t a b a s es y s t e mi st op r o v i d eu s e r sw i t ha na b s t r a c tview of the data. That is, the system hides certain details of how the data arestored and maintained.•Underlying the structure of a database is thedata model:ac o l l e c t i o no fconceptual tools for describing data, data relationships, data semantics, anddata constraints.•The relational data model is the most widely deployed model for storing datain databases. Other data models are the object-oriented model, the object-relational model, and semistructured data models.•Adata-manipulation language (DML)is a language that enables users toaccess or manipulate data. NonproceduralDMLs, which require a user tospecify only what data are needed, without specifying exactly how to getthose data, are widely used today.•Adata-deﬁnition language (DDL)is a language for specifying the databaseschema and as well as other properties of the data.•Database design mainly', '1.6Database Design15Examples in a university system are programs that allow students to register forcourses, generate class rosters, calculate studentGPA,g e n e r a t ep a y r o l lc h e c k s ,e t c .To access the database,DMLstatements need to be executed from the hostlanguage. There are two ways to do this:•By providing an application program interface (set of procedures) that canbe used to sendDMLandDDLstatements to the database and retrieve theresults.The Open Database Connectivity (ODBC)s t a n d a r df o ru s ew i t ht h eClanguage is a commonly used application program interface standard. TheJava Database Connectivity (JDBC)s t a n d a r dp r o v i d e sc o r r e s p o n d i n gf e a t u r e sto the Java language.•By extending the host language syntax to embedDMLcalls within the hostlanguage program. Usually, a special character prefacesDMLcalls, and apreprocessor, called theDMLprecompiler,c o n v e r t st h eDMLstatements tonormal procedure calls in the host', 'levels of abstraction that we discussed in Section 1.3 apply not onlyto deﬁning or structuring data, but also to manipulating data. At the physicallevel, we must deﬁne algorithms that allow efﬁcient access to data. At higherlevels of abstraction, we emphasize ease of use. The goal is to allow humansto interact efﬁciently with the system. The query processor component of thedatabase system (which we study in Chapters 12 and 13) translatesDMLqueriesinto sequences of actions at the physical level of the database system.1.4.2 Data-Deﬁnition LanguageWe specify a database schema by a set of deﬁnitions expressed by a speciallanguage called adata-deﬁnition language(DDL). TheDDLis also used to specifyadditional properties of the data.']","Procedural DMLs require users to specify both what data is needed and how to retrieve it, while Declarative DMLs only require users to specify what data is needed without detailing how to retrieve it. Declarative DMLs are generally easier to learn and use compared to procedural DMLs. The database system has to figure out an efficient means of accessing data when using Declarative DMLs.",Procedural DMLs require a user to specify what data are needed and how to get those data. But Declarative DMLs (also referred to as nonprocedural DMLs) require a user to specify what data are needed without specifying how to get those data.,0.9599050970067324,0.9999999999833333,1.0,1.0,0.7424718052078993
13,"As we can see in the 'department' table, What is the dept_name that belongs to 'Taylor' building?","['dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', '14Chapter 1Introductionlabeledname,a n das e to fr o w s ,e a c ho fw h i c hc o n t a i n st h en a m eo fa ni n s t r u c t o rwhosedept\nname,i sH i s t o r y .I ft h eq u e r yi sr u no nt h et a b l ei nF i g u r e1 . 2 ,t h er e s u l twill consist of two rows, one with the name El Said and the other with the nameCaliﬁeri.Queries may involve information from more than one table. For instance, thefollowing query ﬁnds the instructorIDand department name of all instructorsassociated with a department with budget of greater than $95,000.selectinstructor.ID,department.dept\nnamefrominstructor,departmentwhereinstructor.dept\nname=department.dept\nnameanddepartment.budget>95000;If the above query were run on the tables in Figure 1.2, the system would ﬁndthat there are two departments with budget of greater than $95,000—ComputerScience and Finance; there are ﬁve instructors in these departments. Thus, theresult will consist of a table with two columns (ID,dept', 'name), is located in a particularbuilding,a n dh a sabudget.•Each department has a list of courses it offers. Each course has associated withit acourse\nid,title,dept\nname,a n dcredits,a n dm a ya l s oh a v eh a v ea s s o c i a t e dprerequisites.•Instructors are identiﬁed by their uniqueID.E a c hi n s t r u c t o rh a sname,a s s o -ciated department (dept\nname), andsalary.•Students are identiﬁed by their uniqueID.E a c hs t u d e n th a saname,a na s s o c i -ated major department (dept\nname), andtot\ncred(total credit hours the studentearned thus far).', '1.5Relational Databases13\nID\nname\ndept\nname\nsalary\n22222\nEinstein\nPhysics\n95000\n12121\nWu\nFinance\n90000\n32343\nEl Said\nHistory\n60000\n45565\nKatz\nComp. Sci.\n75000\n98345\nKim\nElec. Eng.\n80000\n76766\nCrick\nBiology\n72000\n10101\nSrinivasan\nComp. Sci.\n65000\n58583\nCaliﬁeri\nHistory\n62000\n83821\nBrandt\nComp. Sci.\n92000\n15151\nMozart\nMusic\n40000\n33456\nGold\nPhysics\n87000\n76543\nSingh\nFinance\n80000\n(a) Theinstructortable\ndept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000', 'Figure 1.4Thefacultytable.We shall discuss these problems with the help of a modiﬁed database design forour university example.Suppose that instead of having the two separate tablesinstructoranddepart-ment,w eh a v eas i n g l et a b l e ,faculty, that combines the information from the twotables (as shown in Figure 1.4). Notice that there are two rows infacultythatcontain repeated information about the History department, speciﬁcally, thatdepartment’s building and budget. The repetition of information in our alterna-tive design is undesirable. Repeating information wastes space. Furthermore, itcomplicates updating the database. Suppose that we wish to change the budgetamount of the History department from $50,000 to $46,800. This change mustbe reﬂected in the two rows; contrast this with the original design, where thisrequires an update to only a single row. Thus, updates are more costly under thealternative design than under the original design. When we perform the updatein the', '1.6Database Design19\nID\nname\nsalary\ndept\nname\nbuilding\nbudget\n22222\nEinstein\n95000\nPhysics\nWatson\n70000\n12121\nWu\n90000\nFinance\nPainter\n120000\n32343\nEl Said\n60000\nHistory\nPainter\n50000\n45565\nKatz\n75000\nComp. Sci.\nTaylor\n100000\n98345\nKim\n80000\nElec. Eng.\nTaylor\n85000\n76766\nCrick\n72000\nBiology\nWatson\n90000\n10101\nSrinivasan\n65000\nComp. Sci.\nTaylor\n100000\n58583\nCaliﬁeri\n62000\nHistory\nPainter\n50000\n83821\nBrandt\n92000\nComp. Sci.\nTaylor\n100000\n15151\nMozart\n40000\nMusic\nPackard\n80000\n33456\nGold\n87000\nPhysics\nWatson\n70000\n76543\nSingh\n80000\nFinance\nPainter\n120000']","The dept_name that belongs to the 'Taylor' building in the 'department' table is 'Comp. Sci.' This department is associated with the 'Taylor' building and has a budget of $100,000.",Comp. Sci department and Elec. Eng. department belongs to the building named 'Taylor'.,0.9623747597087449,0.6666666666444444,1.0,1.0,0.4088510541453136
14,"As we can see the 'instructor' table, How many professor data are stored in the instructor table?","['Figure 1.4Thefacultytable.We shall discuss these problems with the help of a modiﬁed database design forour university example.Suppose that instead of having the two separate tablesinstructoranddepart-ment,w eh a v eas i n g l et a b l e ,faculty, that combines the information from the twotables (as shown in Figure 1.4). Notice that there are two rows infacultythatcontain repeated information about the History department, speciﬁcally, thatdepartment’s building and budget. The repetition of information in our alterna-tive design is undesirable. Repeating information wastes space. Furthermore, itcomplicates updating the database. Suppose that we wish to change the budgetamount of the History department from $50,000 to $46,800. This change mustbe reﬂected in the two rows; contrast this with the original design, where thisrequires an update to only a single row. Thus, updates are more costly under thealternative design than under the original design. When we perform the updatein the', '14Chapter 1Introductionlabeledname,a n das e to fr o w s ,e a c ho fw h i c hc o n t a i n st h en a m eo fa ni n s t r u c t o rwhosedept\nname,i sH i s t o r y .I ft h eq u e r yi sr u no nt h et a b l ei nF i g u r e1 . 2 ,t h er e s u l twill consist of two rows, one with the name El Said and the other with the nameCaliﬁeri.Queries may involve information from more than one table. For instance, thefollowing query ﬁnds the instructorIDand department name of all instructorsassociated with a department with budget of greater than $95,000.selectinstructor.ID,department.dept\nnamefrominstructor,departmentwhereinstructor.dept\nname=department.dept\nnameanddepartment.budget>95000;If the above query were run on the tables in Figure 1.2, the system would ﬁndthat there are two departments with budget of greater than $95,000—ComputerScience and Finance; there are ﬁve instructors in these departments. Thus, theresult will consist of a table with two columns (ID,dept', 'name,building,budget)u n l e s st h a td e p a r t m e n th a sa tl e a s to n einstructor at the university. This is because rows in the faculty table requirevalues forID,name,a n dsalary.T h i sm e a n st h a tw ec a n n o tr e c o r di n f o r m a t i o nabout the newly created department until the ﬁrst instructor is hired for the newdepartment.One solution to this problem is to introducenullvalues. Thenullvalueindicates that the value does not exist (or is not known). An unknown valuemay be eithermissing(the value does exist, but we do not have that information)ornot known(we do not know whether or not the value actually exists). As we', 'theinstructorrecord with a particularID,o ra l linstructorrecords with a particularname.Hashing is an alternative to indexing that is faster in some but not all cases.We discuss storage media, ﬁle structures, and buffer management in Chapter 10.Methods of accessing data efﬁciently via indexing or hashing are discussed inChapter 11.1.7.2 The Query ProcessorThe query processor components include:•DDLinterpreter,w h i c hi n t e r p r e t sDDLstatements and records the deﬁnitionsin the data dictionary.•DML compiler, which translatesDMLstatements in a query language into anevaluation plan consisting of low-level instructions that the query evaluationengine understands.', '20Chapter 1Introductionshall see later, null values are difﬁcult to handle, and it is preferable not to resortto them. If we are not willing to deal with null values, then we can create aparticular item of department information only when the department has at leastone instructor associated with the department. Furthermore, we would haveto delete this information when the last instructor in the department departs.Clearly, this situation is undesirable, since, under our original database design,the department information would be available regardless of whether or notthere is an instructor associated with thed e p a r t m e n t ,a n dw i t h o u tr e s o r t i n gt onull values.An extensive theory of normalization has been developed that helps formallydeﬁne what database designs are undesirable, and how to obtain desirable de-signs. Chapter 8 covers relational-database design, including normalization.1.7Data Storage and QueryingAd a t a b a s es y s t e mi sp a r t i t i o n e di n t om', '1.5Relational Databases13\nID\nname\ndept\nname\nsalary\n22222\nEinstein\nPhysics\n95000\n12121\nWu\nFinance\n90000\n32343\nEl Said\nHistory\n60000\n45565\nKatz\nComp. Sci.\n75000\n98345\nKim\nElec. Eng.\n80000\n76766\nCrick\nBiology\n72000\n10101\nSrinivasan\nComp. Sci.\n65000\n58583\nCaliﬁeri\nHistory\n62000\n83821\nBrandt\nComp. Sci.\n92000\n15151\nMozart\nMusic\n40000\n33456\nGold\nPhysics\n87000\n76543\nSingh\nFinance\n80000\n(a) Theinstructortable\ndept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000']","There are 10 rows of professor data stored in the 'instructor' table. Each row represents a different professor with their respective department, name, and salary information.",The information of 12 professors is stored in the instructor table.,0.955338615818898,0.16666666665,0.6666666666666666,0.0,0.23129787560236928
15,"In the department table, which dept_name is with budget over 90000?","['dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', '1.5Relational Databases13\nID\nname\ndept\nname\nsalary\n22222\nEinstein\nPhysics\n95000\n12121\nWu\nFinance\n90000\n32343\nEl Said\nHistory\n60000\n45565\nKatz\nComp. Sci.\n75000\n98345\nKim\nElec. Eng.\n80000\n76766\nCrick\nBiology\n72000\n10101\nSrinivasan\nComp. Sci.\n65000\n58583\nCaliﬁeri\nHistory\n62000\n83821\nBrandt\nComp. Sci.\n92000\n15151\nMozart\nMusic\n40000\n33456\nGold\nPhysics\n87000\n76543\nSingh\nFinance\n80000\n(a) Theinstructortable\ndept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000', '14Chapter 1Introductionlabeledname,a n das e to fr o w s ,e a c ho fw h i c hc o n t a i n st h en a m eo fa ni n s t r u c t o rwhosedept\nname,i sH i s t o r y .I ft h eq u e r yi sr u no nt h et a b l ei nF i g u r e1 . 2 ,t h er e s u l twill consist of two rows, one with the name El Said and the other with the nameCaliﬁeri.Queries may involve information from more than one table. For instance, thefollowing query ﬁnds the instructorIDand department name of all instructorsassociated with a department with budget of greater than $95,000.selectinstructor.ID,department.dept\nnamefrominstructor,departmentwhereinstructor.dept\nname=department.dept\nnameanddepartment.budget>95000;If the above query were run on the tables in Figure 1.2, the system would ﬁndthat there are two departments with budget of greater than $95,000—ComputerScience and Finance; there are ﬁve instructors in these departments. Thus, theresult will consist of a table with two columns (ID,dept', '1.6Database Design19\nID\nname\nsalary\ndept\nname\nbuilding\nbudget\n22222\nEinstein\n95000\nPhysics\nWatson\n70000\n12121\nWu\n90000\nFinance\nPainter\n120000\n32343\nEl Said\n60000\nHistory\nPainter\n50000\n45565\nKatz\n75000\nComp. Sci.\nTaylor\n100000\n98345\nKim\n80000\nElec. Eng.\nTaylor\n85000\n76766\nCrick\n72000\nBiology\nWatson\n90000\n10101\nSrinivasan\n65000\nComp. Sci.\nTaylor\n100000\n58583\nCaliﬁeri\n62000\nHistory\nPainter\n50000\n83821\nBrandt\n92000\nComp. Sci.\nTaylor\n100000\n15151\nMozart\n40000\nMusic\nPackard\n80000\n33456\nGold\n87000\nPhysics\nWatson\n70000\n76543\nSingh\n80000\nFinance\nPainter\n120000', 'Figure 1.4Thefacultytable.We shall discuss these problems with the help of a modiﬁed database design forour university example.Suppose that instead of having the two separate tablesinstructoranddepart-ment,w eh a v eas i n g l et a b l e ,faculty, that combines the information from the twotables (as shown in Figure 1.4). Notice that there are two rows infacultythatcontain repeated information about the History department, speciﬁcally, thatdepartment’s building and budget. The repetition of information in our alterna-tive design is undesirable. Repeating information wastes space. Furthermore, itcomplicates updating the database. Suppose that we wish to change the budgetamount of the History department from $50,000 to $46,800. This change mustbe reﬂected in the two rows; contrast this with the original design, where thisrequires an update to only a single row. Thus, updates are more costly under thealternative design than under the original design. When we perform the updatein the', 'namevalue in acourserecord must appear in thedept']","The dept_name in the department table with a budget over 90000 is 'Comp. Sci.' This department has a budget of $100,000.",3 dept_name have more than 9000 budget.,0.9774561993446534,0.9166666666361111,1.0,0.0,0.21457806555568049
