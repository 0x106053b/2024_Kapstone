,user_input,retrieved_contexts,response,reference,answer_relevancy,context_precision,faithfulness,context_recall,answer_correctness
0,Please tell me some representative examples of Database applications.,"['of a query.Exercises1.7List four applications you have used that most likely employed a databasesystem to store persistent data.1.8List four signiﬁcant differences between a ﬁle-processing system and aDBMS.1.9Explain the concept of physical data independence, and its importance indatabase systems.1.10List ﬁve responsibilities of a database-management system. For each re-sponsibility, explain the problems that would arise if the responsibilitywere not discharged.1.11List at least two reasons why database systems support data manipulationusing a declarative query language such asSQL,i n s t e a do fj u s tp r o v i d i n gaal i b r a r yo fCo rC + +f u n c t i o n st oc a r r yo u td a t am a n i p u l a t i o n .1.12Explain what problems are caused by the design of the table in Figure 1.4.1.13What are ﬁve main functions of a database administrator?1.14Explain the difference between two-tier and three-tier architectures. Whichis better suited for Web applications? Why?1.15Describe at', 'of a query.Exercises1.7List four applications you have used that most likely employed a databasesystem to store persistent data.1.8List four signiﬁcant differences between a ﬁle-processing system and aDBMS.1.9Explain the concept of physical data independence, and its importance indatabase systems.1.10List ﬁve responsibilities of a database-management system. For each re-sponsibility, explain the problems that would arise if the responsibilitywere not discharged.1.11List at least two reasons why database systems support data manipulationusing a declarative query language such asSQL,i n s t e a do fj u s tp r o v i d i n gaal i b r a r yo fCo rC + +f u n c t i o n st oc a r r yo u td a t am a n i p u l a t i o n .1.12Explain what problems are caused by the design of the table in Figure 1.4.1.13What are ﬁve main functions of a database administrator?1.14Explain the difference between two-tier and three-tier architectures. Whichis better suited for Web applications? Why?1.15Describe at', 'of a query.Exercises1.7List four applications you have used that most likely employed a databasesystem to store persistent data.1.8List four signiﬁcant differences between a ﬁle-processing system and aDBMS.1.9Explain the concept of physical data independence, and its importance indatabase systems.1.10List ﬁve responsibilities of a database-management system. For each re-sponsibility, explain the problems that would arise if the responsibilitywere not discharged.1.11List at least two reasons why database systems support data manipulationusing a declarative query language such asSQL,i n s t e a do fj u s tp r o v i d i n gaal i b r a r yo fCo rC + +f u n c t i o n st oc a r r yo u td a t am a n i p u l a t i o n .1.12Explain what problems are caused by the design of the table in Figure 1.4.1.13What are ﬁve main functions of a database administrator?1.14Explain the difference between two-tier and three-tier architectures. Whichis better suited for Web applications? Why?1.15Describe at', 'of a query.Exercises1.7List four applications you have used that most likely employed a databasesystem to store persistent data.1.8List four signiﬁcant differences between a ﬁle-processing system and aDBMS.1.9Explain the concept of physical data independence, and its importance indatabase systems.1.10List ﬁve responsibilities of a database-management system. For each re-sponsibility, explain the problems that would arise if the responsibilitywere not discharged.1.11List at least two reasons why database systems support data manipulationusing a declarative query language such asSQL,i n s t e a do fj u s tp r o v i d i n gaal i b r a r yo fCo rC + +f u n c t i o n st oc a r r yo u td a t am a n i p u l a t i o n .1.12Explain what problems are caused by the design of the table in Figure 1.4.1.13What are ﬁve main functions of a database administrator?1.14Explain the difference between two-tier and three-tier architectures. Whichis better suited for Web applications? Why?1.15Describe at', 'of a query.Exercises1.7List four applications you have used that most likely employed a databasesystem to store persistent data.1.8List four signiﬁcant differences between a ﬁle-processing system and aDBMS.1.9Explain the concept of physical data independence, and its importance indatabase systems.1.10List ﬁve responsibilities of a database-management system. For each re-sponsibility, explain the problems that would arise if the responsibilitywere not discharged.1.11List at least two reasons why database systems support data manipulationusing a declarative query language such asSQL,i n s t e a do fj u s tp r o v i d i n gaal i b r a r yo fCo rC + +f u n c t i o n st oc a r r yo u td a t am a n i p u l a t i o n .1.12Explain what problems are caused by the design of the table in Figure 1.4.1.13What are ﬁve main functions of a database administrator?1.14Explain the difference between two-tier and three-tier architectures. Whichis better suited for Web applications? Why?1.15Describe at', '24Chapter 1IntroductionDatabase applications are usually partitioned into two or three parts, as inFigure 1.6. In atwo-tier architecture,t h ea p p l i c a t i o nr e s i d e sa tt h ec l i e n tm a c h i n e ,where it invokes database system functionality at the server machine throughnaive users(tellers, agents, web users)\nquery processor\nstorage managerdisk storageindicesstatistical datadatadata dictionaryapplicationprogrammersapplicationinterfaces\napplicationprogramobject codecompiler andlinker\nbuﬀer managerﬁle managerauthorizationand integrity managertransactionmanagerDML compiler and organizerquery evaluationengineDML queriesDDL interpreterapplicationprogramsquerytoolsadministrationtoolssophisticatedusers(analysts)databaseadministratorsusewriteuseuse\nFigure 1.5System structure.']","Some representative examples of database applications include customer relationship management (CRM) systems, enterprise resource planning (ERP) systems, online banking systems, and e-commerce platforms.","Database can be used for Enterprise Information, Banking and Finance, Universities, Airlines and Telecommunication so on.",0.9715061222547225,0.0,0.0,1.0,0.21889399249137453
1,What kinds of data storage is used in 1950s?,"['data from tapesand card decks.•Late 1960s and 1970s:W i d e s p r e a du s eo fh a r dd i s k si nt h el a t e1 9 6 0 sc h a n g e dthe scenario for data processing greatly, since hard disks allowed direct accessto data. The position of data on disk was immaterial, since any location ondisk could be accessed in just tens of milliseconds. Data were thus freed from', 'data from tapesand card decks.•Late 1960s and 1970s:W i d e s p r e a du s eo fh a r dd i s k si nt h el a t e1 9 6 0 sc h a n g e dthe scenario for data processing greatly, since hard disks allowed direct accessto data. The position of data on disk was immaterial, since any location ondisk could be accessed in just tens of milliseconds. Data were thus freed from', 'data from tapesand card decks.•Late 1960s and 1970s:W i d e s p r e a du s eo fh a r dd i s k si nt h el a t e1 9 6 0 sc h a n g e dthe scenario for data processing greatly, since hard disks allowed direct accessto data. The position of data on disk was immaterial, since any location ondisk could be accessed in just tens of milliseconds. Data were thus freed from', 'data from tapesand card decks.•Late 1960s and 1970s:W i d e s p r e a du s eo fh a r dd i s k si nt h el a t e1 9 6 0 sc h a n g e dthe scenario for data processing greatly, since hard disks allowed direct accessto data. The position of data on disk was immaterial, since any location ondisk could be accessed in just tens of milliseconds. Data were thus freed from', 'data from tapesand card decks.•Late 1960s and 1970s:W i d e s p r e a du s eo fh a r dd i s k si nt h el a t e1 9 6 0 sc h a n g e dthe scenario for data processing greatly, since hard disks allowed direct accessto data. The position of data on disk was immaterial, since any location ondisk could be accessed in just tens of milliseconds. Data were thus freed from', 'database and ensuring that performanceis not degraded by very expensive tasks submitted by some users.1.13History of Database SystemsInformation processing drives the growth of computers, as it has from the earli-est days of commercial computers. In fact, automation of data processing taskspredates computers. Punched cards, invented by Herman Hollerith, were usedat the very beginning of the twentieth century to record U.S. census data, andmechanical systems were used to process the cards and tabulate results. Punchedcards were later widely used as a means of entering data into computers.Techniques for data storage and processing have evolved over the years:•1950s and early 1960s:M a g n e t i ct a p e sw e r ed e v e l o p e df o rd a t as t o r a g e .D a t aprocessing tasks such as payroll were automated, with data stored on tapes.Processing of data consisted of reading data from one or more tapes andwriting data to a new tape. Data could also be input from punched carddecks, and']","In the 1950s, magnetic tapes were developed for data storage. Data processing tasks, such as payroll, were automated with data stored on these tapes. Additionally, data could be input from punched card decks.","Magnetic tapes were developed for data storage. Data processing tasks such as payroll were automated, with data stored on tapes.",0.879888580928521,0.16666666665,0.6666666666666666,1.0,0.6715643778823903
2,Relational model concept is defined by whom? Please tell me his/her name.,"['character) may be usedto delimit records. The relational model hides such low-level implementationdetails from database developers and users.We also note that it is possible to create schemas in the relational model thathave problems such as unnecessarily duplicated information. For example, sup-pose we store the departmentbudgetas an attribute of theinstructorrecord. Then,whenever the value of a particular budget (say that one for the Physics depart-ment) changes, that change must to be reﬂected in the records of all instructors', 'character) may be usedto delimit records. The relational model hides such low-level implementationdetails from database developers and users.We also note that it is possible to create schemas in the relational model thathave problems such as unnecessarily duplicated information. For example, sup-pose we store the departmentbudgetas an attribute of theinstructorrecord. Then,whenever the value of a particular budget (say that one for the Physics depart-ment) changes, that change must to be reﬂected in the records of all instructors', 'character) may be usedto delimit records. The relational model hides such low-level implementationdetails from database developers and users.We also note that it is possible to create schemas in the relational model thathave problems such as unnecessarily duplicated information. For example, sup-pose we store the departmentbudgetas an attribute of theinstructorrecord. Then,whenever the value of a particular budget (say that one for the Physics depart-ment) changes, that change must to be reﬂected in the records of all instructors', 'character) may be usedto delimit records. The relational model hides such low-level implementationdetails from database developers and users.We also note that it is possible to create schemas in the relational model thathave problems such as unnecessarily duplicated information. For example, sup-pose we store the departmentbudgetas an attribute of theinstructorrecord. Then,whenever the value of a particular budget (say that one for the Physics depart-ment) changes, that change must to be reﬂected in the records of all instructors', 'character) may be usedto delimit records. The relational model hides such low-level implementationdetails from database developers and users.We also note that it is possible to create schemas in the relational model thathave problems such as unnecessarily duplicated information. For example, sup-pose we store the departmentbudgetas an attribute of theinstructorrecord. Then,whenever the value of a particular budget (say that one for the Physics depart-ment) changes, that change must to be reﬂected in the records of all instructors', 'RELATIONALDATABASESAd a t am o d e li sac o l l e c t i o no fc o n c e p t u a lt o o l sf o rd e s c r i b i n gd a t a ,d a t ar e l a t i o n -ships, data semantics, and consistency constraints. In this part, we focus on therelational model.The relational model, which is covered in Chapter 2, uses a collection of tablesto represent both data and the relationships among those data. Its conceptualsimplicity has led to its widespread adoption; today a vast majority of databaseproducts are based on the relational model. The relational model describes data atthe logical and view levels, abstracting away low-level details of data storage. Theentity-relationship model, discussed later in Chapter 7 (in Part 2), is a higher-leveldata model which is widely used for database design.To make data from a relational database available to users, we have to ad-dress several issues. The most important issue is how users specify requests forretrieving and updating data; several query languages have']",The relational model concept was defined by Edgar F. Codd.,"A landmark paper by Codd [1970] defined the relational model and nonprocedural ways of querying data in the relational model, and relational databases were born.",0.9136994998827673,0.9999999999833333,0.0,0.0,0.5236992488583662
3,What is DML and DDL?,"['10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '12Chapter 1IntroductionTheDDL,j u s tl i k ea n yo t h e rp r o g r a m m i n gl a n g u a g e ,g e t sa si n p u ts o m einstructions (statements) and generates some output. The output of theDDLisplaced in thedata dictionary,w h i c hc o n t a i n smetadata—thatis,dataaboutdata.The data dictionary is considered to be a special type of table that can only beaccessed and updated by the database system itself (not a regular user). Thedatabase system consults the data dictionary before reading or modifying actualdata.1.5Relational DatabasesAr e l a t i o n a ld a t a b a s ei sb a s e do nt h er e l a t i o n a lm o d e la n du s e sac o l l e c t i o no ftables to represent both data and the relationships among those data. It also in-cludes aDMLandDDL.I nC h a p t e r2w ep r e s e n tag e n t l ei n t r o d u c t i o nt ot h efundamentals of the relational model. Most commercial relational database sys-tems employ theSQLlanguage, which we cover in great detail in Chapters 3, 4,and 5. In']","DML (Data-Manipulation Language) is a language that enables users to access or manipulate data organized by the appropriate data model, including retrieval, insertion, deletion, and modification of information in a database. DDL (Data-Definition Language) is a language used to define data structures, such as creating, altering, and deleting database objects like tables and indexes, and it generates metadata stored in the data dictionary. Both DML and DDL are integral parts of a database language like SQL.",A data-manipulation language (DML) is a language that enables users to access or manipulate data. And a data-definition language (DDL) is a language for specifying the database schema and as well as other properties of the data.,0.933180499420705,0.9999999999833333,0.6666666666666666,1.0,0.7060345748136518
4,Please briefly introduce the disadvantages of managing structural data using the file system.,"['and add records to, the ap-propriate ﬁles. Before database management systems (DBMSs) were introduced,organizations usually stored information in such systems.Keeping organizational information in a ﬁle-processing system has a numberof major disadvantages:', 'and add records to, the ap-propriate ﬁles. Before database management systems (DBMSs) were introduced,organizations usually stored information in such systems.Keeping organizational information in a ﬁle-processing system has a numberof major disadvantages:', 'and add records to, the ap-propriate ﬁles. Before database management systems (DBMSs) were introduced,organizations usually stored information in such systems.Keeping organizational information in a ﬁle-processing system has a numberof major disadvantages:', 'and add records to, the ap-propriate ﬁles. Before database management systems (DBMSs) were introduced,organizations usually stored information in such systems.Keeping organizational information in a ﬁle-processing system has a numberof major disadvantages:', 'and add records to, the ap-propriate ﬁles. Before database management systems (DBMSs) were introduced,organizations usually stored information in such systems.Keeping organizational information in a ﬁle-processing system has a numberof major disadvantages:', '4Chapter 1Introduction•Data redundancy and inconsistency.S i n c ed i f f e r e n tp r o g r a m m e r sc r e a t ethe ﬁles and application programs over a long period, the various ﬁles arelikely to have different structures and the programs may be written in severalprogramming languages. Moreover, the same information may be duplicatedin several places (ﬁles). For example, if a student has a double major (say,music and mathematics) the address and telephone number of that studentmay appear in a ﬁle that consists of student records of students in the Musicdepartment and in a ﬁle that consists of student records of students in theMathematics department. This redundancy leads to higher storage and accesscost. In addition, it may lead todata inconsistency;t h a ti s ,t h ev a r i o u sc o p i e sof the same data may no longer agree. For example, a changed student addressmay be reﬂected in the Music department records but not elsewhere in thesystem.•Difﬁculty in accessing data.S u p p o s']","Managing structural data using a file system has several disadvantages, including data redundancy and inconsistency, as different files may have varying structures and duplicate information. This redundancy increases storage and access costs and can lead to inconsistencies when data is updated in one file but not in others. Additionally, accessing data can be difficult due to the lack of a unified system for managing and retrieving information.","File system may have data redundancy and inconsistency, difficulty in accessing data, data isolation problem, integrity problem, atomcity problem, and concurrent access anomalies.",0.972533004705522,0.9999999999833333,0.8333333333333334,0.3333333333333333,0.5959905473903488
5,Please tell me specifically about the atomity problem in the file system.,"['t o r e di nt h ed a t a b a s em u s ts a t i s f yc e r -tain types ofconsistency constraints.S u p p o s et h eu n i v e r s i t ym a i n t a i n sa naccount for each department, and records the balance amount in each ac-count. Suppose also that the universityrequires that the account balance of adepartment may never fall below zero. Developers enforce these constraintsin the system by adding appropriate code in the various application pro-grams. However, when new constraints are added, it is difﬁcult to changethe programs to enforce them. The problem is compounded when constraintsinvolve several data items from different ﬁles.•Atomicity problems.Ac o m p u t e rs y s t e m ,l i k ea n yo t h e rd e v i c e ,i ss u b j e c tto failure. In many applications, it is crucial that, if a failure occurs, the data', 't o r e di nt h ed a t a b a s em u s ts a t i s f yc e r -tain types ofconsistency constraints.S u p p o s et h eu n i v e r s i t ym a i n t a i n sa naccount for each department, and records the balance amount in each ac-count. Suppose also that the universityrequires that the account balance of adepartment may never fall below zero. Developers enforce these constraintsin the system by adding appropriate code in the various application pro-grams. However, when new constraints are added, it is difﬁcult to changethe programs to enforce them. The problem is compounded when constraintsinvolve several data items from different ﬁles.•Atomicity problems.Ac o m p u t e rs y s t e m ,l i k ea n yo t h e rd e v i c e ,i ss u b j e c tto failure. In many applications, it is crucial that, if a failure occurs, the data', 't o r e di nt h ed a t a b a s em u s ts a t i s f yc e r -tain types ofconsistency constraints.S u p p o s et h eu n i v e r s i t ym a i n t a i n sa naccount for each department, and records the balance amount in each ac-count. Suppose also that the universityrequires that the account balance of adepartment may never fall below zero. Developers enforce these constraintsin the system by adding appropriate code in the various application pro-grams. However, when new constraints are added, it is difﬁcult to changethe programs to enforce them. The problem is compounded when constraintsinvolve several data items from different ﬁles.•Atomicity problems.Ac o m p u t e rs y s t e m ,l i k ea n yo t h e rd e v i c e ,i ss u b j e c tto failure. In many applications, it is crucial that, if a failure occurs, the data', 't o r e di nt h ed a t a b a s em u s ts a t i s f yc e r -tain types ofconsistency constraints.S u p p o s et h eu n i v e r s i t ym a i n t a i n sa naccount for each department, and records the balance amount in each ac-count. Suppose also that the universityrequires that the account balance of adepartment may never fall below zero. Developers enforce these constraintsin the system by adding appropriate code in the various application pro-grams. However, when new constraints are added, it is difﬁcult to changethe programs to enforce them. The problem is compounded when constraintsinvolve several data items from different ﬁles.•Atomicity problems.Ac o m p u t e rs y s t e m ,l i k ea n yo t h e rd e v i c e ,i ss u b j e c tto failure. In many applications, it is crucial that, if a failure occurs, the data', 't o r e di nt h ed a t a b a s em u s ts a t i s f yc e r -tain types ofconsistency constraints.S u p p o s et h eu n i v e r s i t ym a i n t a i n sa naccount for each department, and records the balance amount in each ac-count. Suppose also that the universityrequires that the account balance of adepartment may never fall below zero. Developers enforce these constraintsin the system by adding appropriate code in the various application pro-grams. However, when new constraints are added, it is difﬁcult to changethe programs to enforce them. The problem is compounded when constraintsinvolve several data items from different ﬁles.•Atomicity problems.Ac o m p u t e rs y s t e m ,l i k ea n yo t h e rd e v i c e ,i ss u b j e c tto failure. In many applications, it is crucial that, if a failure occurs, the data', 'arise in a distributed database, and describes how to dealwith each issue. The issues include how to store data, how to ensure atomicity oftransactions that execute at multiple sites, how to perform concurrency control,and how to provide high availability in the presence of failures. Distributed queryprocessing and directory systems are also described in this chapter.Most users of a database system today are not present at the site of thedatabase system, but connect to it through a network. We can therefore differen-tiate betweenclientmachines, on which remote database users work, andservermachines, on which the database system runs.']","The atomicity problem in a file system arises because computer systems are subject to failures, and it is crucial that if a failure occurs, the data remains consistent. In file systems, ensuring atomicity is challenging because operations may be interrupted, leading to partial updates that can leave data in an inconsistent state. This problem is compounded when multiple data items from different files are involved, making it difficult to ensure that all operations are completed successfully or not at all.","A computer system, like any other device, is subject to failure. In many applications, it is crucial that, if a failure occurs, the data be restored to the consistent state that existed prior to the failure. But usual file system doesn't guarantee this atomcity.",0.8619272468119785,0.0,1.0,0.3333333333333333,0.724243894379129
6,how database system hides certain details of how data are stored?,"['6Chapter 1IntroductionThese difﬁculties, among others, prompted the development of database sys-tems. In what follows, we shall see the concepts and algorithms that enabledatabase systems to solve the problems with ﬁle-processing systems. In most ofthis book, we use a university organization as a running example of a typicaldata-processing application.1.3View of DataAd a t a b a s es y s t e mi sac o l l e c t i o no fi n t e r r e l a t e dd a t aa n das e to fp r o g r a m st h a tallow users to access and modify these data. A major purpose of a databasesystem is to provide users with anabstractview of the data. That is, the systemhides certain details of how the data are stored and maintained.1.3.1 Data AbstractionFor the system to be usable, it must retrieve data efﬁciently. The need for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users', '6Chapter 1IntroductionThese difﬁculties, among others, prompted the development of database sys-tems. In what follows, we shall see the concepts and algorithms that enabledatabase systems to solve the problems with ﬁle-processing systems. In most ofthis book, we use a university organization as a running example of a typicaldata-processing application.1.3View of DataAd a t a b a s es y s t e mi sac o l l e c t i o no fi n t e r r e l a t e dd a t aa n das e to fp r o g r a m st h a tallow users to access and modify these data. A major purpose of a databasesystem is to provide users with anabstractview of the data. That is, the systemhides certain details of how the data are stored and maintained.1.3.1 Data AbstractionFor the system to be usable, it must retrieve data efﬁciently. The need for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users', '6Chapter 1IntroductionThese difﬁculties, among others, prompted the development of database sys-tems. In what follows, we shall see the concepts and algorithms that enabledatabase systems to solve the problems with ﬁle-processing systems. In most ofthis book, we use a university organization as a running example of a typicaldata-processing application.1.3View of DataAd a t a b a s es y s t e mi sac o l l e c t i o no fi n t e r r e l a t e dd a t aa n das e to fp r o g r a m st h a tallow users to access and modify these data. A major purpose of a databasesystem is to provide users with anabstractview of the data. That is, the systemhides certain details of how the data are stored and maintained.1.3.1 Data AbstractionFor the system to be usable, it must retrieve data efﬁciently. The need for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users', '6Chapter 1IntroductionThese difﬁculties, among others, prompted the development of database sys-tems. In what follows, we shall see the concepts and algorithms that enabledatabase systems to solve the problems with ﬁle-processing systems. In most ofthis book, we use a university organization as a running example of a typicaldata-processing application.1.3View of DataAd a t a b a s es y s t e mi sac o l l e c t i o no fi n t e r r e l a t e dd a t aa n das e to fp r o g r a m st h a tallow users to access and modify these data. A major purpose of a databasesystem is to provide users with anabstractview of the data. That is, the systemhides certain details of how the data are stored and maintained.1.3.1 Data AbstractionFor the system to be usable, it must retrieve data efﬁciently. The need for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users', '6Chapter 1IntroductionThese difﬁculties, among others, prompted the development of database sys-tems. In what follows, we shall see the concepts and algorithms that enabledatabase systems to solve the problems with ﬁle-processing systems. In most ofthis book, we use a university organization as a running example of a typicaldata-processing application.1.3View of DataAd a t a b a s es y s t e mi sac o l l e c t i o no fi n t e r r e l a t e dd a t aa n das e to fp r o g r a m st h a tallow users to access and modify these data. A major purpose of a databasesystem is to provide users with anabstractview of the data. That is, the systemhides certain details of how the data are stored and maintained.1.3.1 Data AbstractionFor the system to be usable, it must retrieve data efﬁciently. The need for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users', 'for efﬁciencyhas led designers to use complex data structures to represent data in the database.Since many database-system users are not computer trained, developers hide thecomplexity from users through several levels of abstraction, to simplify users’interactions with the system:•Physical level.T h el o w e s tl e v e lo fa b s t r a c t i o nd e s c r i b e showthe data are ac-tually stored. The physical level describes complex low-level data structuresin detail.•Logical level.T h en e x t - h i g h e rl e v e lo fa b s t r a c t i o nd e s c r i b e swhatdata arestored in the database, and what relationships exist among those data. Thelogical level thus describes the entire database in terms of a small number ofrelatively simple structures. Althoughimplementation of the simple struc-tures at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a']","A database system hides certain details of how data are stored through data abstraction, which involves multiple levels of abstraction. The physical level describes how data are actually stored using complex low-level structures, while the logical level describes what data are stored and the relationships among them using simpler structures. This abstraction allows users to interact with the database without needing to understand the underlying complexities, providing physical data independence.",Database system provides users with an abstract view of the data.,0.8923785472902012,0.9999999999833333,1.0,1.0,0.40768130917804246
7,Please briefly introduce the 3 levels of data abstraction.,"['1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot', '1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot', '1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot', '1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot', '1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot', 'at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages']","The three levels of data abstraction are the physical level, logical level, and view level. The physical level describes how data are actually stored using complex low-level structures. The logical level describes what data are stored and the relationships among them, while the view level provides a simplified interaction by showing only a part of the database relevant to the user's needs.","Database system hides the complexity from users through several levels of abstraction, to simplify users' interactions with the system. This abstraction hierarchy consists of physical level, logical level, and view level.",0.9684438799564871,0.9999999999833333,0.7142857142857143,1.0,0.7998170604599399
8,What is the characteristic of logical level in data abstraction?,"['at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages', 'at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages', 'at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages', 'at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages', 'at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages', '1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot']","The characteristic of the logical level in data abstraction is that it describes what data are stored and the relationships among them using simpler structures, without requiring awareness of the complex physical-level structures. This level provides physical data independence, allowing database administrators to manage the data without needing to understand the underlying complexities.","Logical level describes what data are stored in the database, and what relationships exist among those data. The logical level thus describes the entire database in terms of a small number of relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the user of the logical level does not need to be aware of this complexity. This is referred to as physical data independence.",0.9850187398565531,0.9999999999833333,0.75,1.0,0.6349126548481516
9,What is the other name for several schemas at the view level?,"['8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', '8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', '8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', '8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', '8Chapter 1IntroductionAt the logical level, each such record is described by a type deﬁnition, asin the previous code segment, and the interrelationship of these record types isdeﬁned as well. Programmers using a programming language work at this levelof abstraction. Similarly, database administrators usually work at this level ofabstraction.Finally, at the view level, computer users see a set of application programsthat hide details of the data types. At the view level, several views of the databaseare deﬁned, and a database user sees some or all of these views. In additionto hiding details of the logical level of the database, the views also provide asecurity mechanism to prevent users from accessing certain parts of the database.For example, clerks in the university registrar ofﬁce can see only that part of thedatabase that has information about students; they cannot access informationabout salaries of instructors.1.3.2 Instances and SchemasDatabases change over time as information', '1.3View of Data7view 1 view 2logicallevelphysicallevelview n…view level\nFigure 1.1The three levels of data abstraction.languages support the notion of a structured type. For example, we may describear e c o r da sf o l l o w s :1typeinstructor=recordID:char(5);name:char(20);dept\nname:char(20);salary:numeric(8,2);end;This code deﬁnes a new record type calledinstructorwith four ﬁelds. Each ﬁeldhas a name and a type associated with it. A university organization may haveseveral such record types, including•department,w i t hﬁ e l d sdept\nname,building,a n dbudget•course,w i t hﬁ e l d scourse\nid,title,dept\nname,a n dcredits•student,w i t hﬁ e l d sID,name,dept\nname,a n dtot']","The other name for several schemas at the view level is ""views.""",We can call schemas at the view level as 'subschemas' instead.,0.9910666659505534,0.99999999998,,0.0,0.22044285389255056
10,What is physical data indenpendence?,"['are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after introducing the notion ofdata models in the next section.1.3.3 Data ModelsUnderlying the structure of a database is thedata model:ac o l l e c t i o no fc o n c e p t u a ltools for describing data, data relationships, data semantics, and consistencyconstraints. A data model provides a way to describe the design of a database atthe physical, logical, and view levels.', 'are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after introducing the notion ofdata models in the next section.1.3.3 Data ModelsUnderlying the structure of a database is thedata model:ac o l l e c t i o no fc o n c e p t u a ltools for describing data, data relationships, data semantics, and consistencyconstraints. A data model provides a way to describe the design of a database atthe physical, logical, and view levels.', 'are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after introducing the notion ofdata models in the next section.1.3.3 Data ModelsUnderlying the structure of a database is thedata model:ac o l l e c t i o no fc o n c e p t u a ltools for describing data, data relationships, data semantics, and consistencyconstraints. A data model provides a way to describe the design of a database atthe physical, logical, and view levels.', 'are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after introducing the notion ofdata models in the next section.1.3.3 Data ModelsUnderlying the structure of a database is thedata model:ac o l l e c t i o no fc o n c e p t u a ltools for describing data, data relationships, data semantics, and consistencyconstraints. A data model provides a way to describe the design of a database atthe physical, logical, and view levels.', 'are said to exhibitphysical data independenceif they do not dependon the physical schema, and thus need not be rewritten if the physical schemachanges.We study languages for describing schemas after introducing the notion ofdata models in the next section.1.3.3 Data ModelsUnderlying the structure of a database is thedata model:ac o l l e c t i o no fc o n c e p t u a ltools for describing data, data relationships, data semantics, and consistencyconstraints. A data model provides a way to describe the design of a database atthe physical, logical, and view levels.', 'at the logical level may involve complex physical-level structures, theuser of the logical level does not need to be aware of this complexity. Thisis referred to asphysical data independence.D a t a b a s ea d m i n i s t r a t o r s ,w h omust decide what information to keep in the database, use the logical levelof abstraction.•View level.T h eh i g h e s tl e v e lo fa b s t r a c t i o nd e s c r i b e so n l yp a r to ft h ee n t i r edatabase. Even though the logical level uses simpler structures, complexityremains because of the variety of information stored in a large database.Many users of the database system do not need all this information; instead,they need to access only a part of the database. The view level of abstractionexists to simplify their interaction with the system. The system may providemany views for the same database.Figure 1.1 shows the relationship among the three levels of abstraction.An analogy to the concept of data types in programming languages']",Physical data independence is the ability of a database system to allow changes to the physical schema without requiring changes to the logical schema. This means that applications and users interacting with the logical level do not need to be aware of or affected by changes in how data is physically stored. It provides flexibility and ease of maintenance for database administrators.,"e physical schema is hidden beneath the logical schema, and can usually be changed easily without affecting application programs.",0.9830754955336504,0.9999999999833333,0.6666666666666666,1.0,0.5168192487007458
11,What is the differences between procedural DMLs and Declarative DMLs?,"['10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', '10Chapter 1Introductiondates. In practice, the data-deﬁnition and data-manipulation languages are nottwo separate languages; instead they simply form parts of a single database lan-guage, such as the widely usedSQLlanguage.1.4.1 Data-Manipulation LanguageAdata-manipulation language (DML)is a language that enables users to accessor manipulate data as organized by the appropriate data model. The types ofaccess are:•Retrieval of information stored in the database•Insertion of new information into the database•Deletion of information from the database•Modiﬁcation of information stored in the databaseThere are basically two types:•ProceduralDMLsrequire a user to specifywhatdata are needed andhowtoget those data.•DeclarativeDMLs(also referred to asnonproceduralDMLs)r e q u i r eau s e rt ospecifywhatdata are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have', 'are neededwithoutspecifying how to get those data.DeclarativeDMLsa r eu s u a l l ye a s i e rt ol e a r na n du s et h a na r ep r o c e d u r a lDMLs. However, since a user does not have to specify how to get the data, thedatabase system has to ﬁgure out an efﬁcient means of accessing data.Aqueryis a statement requesting the retrieval of information. The portion ofaDMLthat involves information retrieval is called aquery language.A l t h o u g htechnically incorrect, it is common practice to use the termsquery languageanddata-manipulation languagesynonymously.There are a number of database query languages in use, either commerciallyor experimentally. We study the most widely used query language,SQL,i nC h a p -ters 3, 4, and 5. We also study some other query languages in Chapter 6.The levels of abstraction that we discussed in Section 1.3 apply not onlyto deﬁning or structuring data, but also to manipulating data. At the physicallevel, we must deﬁne algorithms that allow efﬁcient']","Procedural DMLs require the user to specify both what data are needed and how to obtain those data, while Declarative DMLs require the user to specify only what data are needed without detailing how to retrieve them. Declarative DMLs are generally easier to learn and use compared to procedural DMLs. The database system determines the most efficient way to access data when using Declarative DMLs.",Procedural DMLs require a user to specify what data are needed and how to get those data. But Declarative DMLs (also referred to as nonprocedural DMLs) require a user to specify what data are needed without specifying how to get those data.,0.9599050970067324,0.9999999999833333,0.75,1.0,0.7428834696693395
12,"As we can see in the 'department' table, What is the dept_name that belongs to 'Taylor' building?","['dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', 'dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', 'dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', 'dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', 'dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', '14Chapter 1Introductionlabeledname,a n das e to fr o w s ,e a c ho fw h i c hc o n t a i n st h en a m eo fa ni n s t r u c t o rwhosedept\nname,i sH i s t o r y .I ft h eq u e r yi sr u no nt h et a b l ei nF i g u r e1 . 2 ,t h er e s u l twill consist of two rows, one with the name El Said and the other with the nameCaliﬁeri.Queries may involve information from more than one table. For instance, thefollowing query ﬁnds the instructorIDand department name of all instructorsassociated with a department with budget of greater than $95,000.selectinstructor.ID,department.dept\nnamefrominstructor,departmentwhereinstructor.dept\nname=department.dept\nnameanddepartment.budget>95000;If the above query were run on the tables in Figure 1.2, the system would ﬁndthat there are two departments with budget of greater than $95,000—ComputerScience and Finance; there are ﬁve instructors in these departments. Thus, theresult will consist of a table with two columns (ID,dept']","The dept_name that belongs to the 'Taylor' building is ""Comp. Sci."" and ""Elec. Eng.""",Comp. Sci department and Elec. Eng. department belongs to the building named 'Taylor'.,0.9205696136538125,0.99999999998,,1.0,0.23830167389902976
13,"As we can see the 'instructor' table, How many professor data are stored in the instructor table?","['Figure 1.4Thefacultytable.We shall discuss these problems with the help of a modiﬁed database design forour university example.Suppose that instead of having the two separate tablesinstructoranddepart-ment,w eh a v eas i n g l et a b l e ,faculty, that combines the information from the twotables (as shown in Figure 1.4). Notice that there are two rows infacultythatcontain repeated information about the History department, speciﬁcally, thatdepartment’s building and budget. The repetition of information in our alterna-tive design is undesirable. Repeating information wastes space. Furthermore, itcomplicates updating the database. Suppose that we wish to change the budgetamount of the History department from $50,000 to $46,800. This change mustbe reﬂected in the two rows; contrast this with the original design, where thisrequires an update to only a single row. Thus, updates are more costly under thealternative design than under the original design. When we perform the updatein the', 'Figure 1.4Thefacultytable.We shall discuss these problems with the help of a modiﬁed database design forour university example.Suppose that instead of having the two separate tablesinstructoranddepart-ment,w eh a v eas i n g l et a b l e ,faculty, that combines the information from the twotables (as shown in Figure 1.4). Notice that there are two rows infacultythatcontain repeated information about the History department, speciﬁcally, thatdepartment’s building and budget. The repetition of information in our alterna-tive design is undesirable. Repeating information wastes space. Furthermore, itcomplicates updating the database. Suppose that we wish to change the budgetamount of the History department from $50,000 to $46,800. This change mustbe reﬂected in the two rows; contrast this with the original design, where thisrequires an update to only a single row. Thus, updates are more costly under thealternative design than under the original design. When we perform the updatein the', 'Figure 1.4Thefacultytable.We shall discuss these problems with the help of a modiﬁed database design forour university example.Suppose that instead of having the two separate tablesinstructoranddepart-ment,w eh a v eas i n g l et a b l e ,faculty, that combines the information from the twotables (as shown in Figure 1.4). Notice that there are two rows infacultythatcontain repeated information about the History department, speciﬁcally, thatdepartment’s building and budget. The repetition of information in our alterna-tive design is undesirable. Repeating information wastes space. Furthermore, itcomplicates updating the database. Suppose that we wish to change the budgetamount of the History department from $50,000 to $46,800. This change mustbe reﬂected in the two rows; contrast this with the original design, where thisrequires an update to only a single row. Thus, updates are more costly under thealternative design than under the original design. When we perform the updatein the', 'Figure 1.4Thefacultytable.We shall discuss these problems with the help of a modiﬁed database design forour university example.Suppose that instead of having the two separate tablesinstructoranddepart-ment,w eh a v eas i n g l et a b l e ,faculty, that combines the information from the twotables (as shown in Figure 1.4). Notice that there are two rows infacultythatcontain repeated information about the History department, speciﬁcally, thatdepartment’s building and budget. The repetition of information in our alterna-tive design is undesirable. Repeating information wastes space. Furthermore, itcomplicates updating the database. Suppose that we wish to change the budgetamount of the History department from $50,000 to $46,800. This change mustbe reﬂected in the two rows; contrast this with the original design, where thisrequires an update to only a single row. Thus, updates are more costly under thealternative design than under the original design. When we perform the updatein the', 'Figure 1.4Thefacultytable.We shall discuss these problems with the help of a modiﬁed database design forour university example.Suppose that instead of having the two separate tablesinstructoranddepart-ment,w eh a v eas i n g l et a b l e ,faculty, that combines the information from the twotables (as shown in Figure 1.4). Notice that there are two rows infacultythatcontain repeated information about the History department, speciﬁcally, thatdepartment’s building and budget. The repetition of information in our alterna-tive design is undesirable. Repeating information wastes space. Furthermore, itcomplicates updating the database. Suppose that we wish to change the budgetamount of the History department from $50,000 to $46,800. This change mustbe reﬂected in the two rows; contrast this with the original design, where thisrequires an update to only a single row. Thus, updates are more costly under thealternative design than under the original design. When we perform the updatein the', '14Chapter 1Introductionlabeledname,a n das e to fr o w s ,e a c ho fw h i c hc o n t a i n st h en a m eo fa ni n s t r u c t o rwhosedept\nname,i sH i s t o r y .I ft h eq u e r yi sr u no nt h et a b l ei nF i g u r e1 . 2 ,t h er e s u l twill consist of two rows, one with the name El Said and the other with the nameCaliﬁeri.Queries may involve information from more than one table. For instance, thefollowing query ﬁnds the instructorIDand department name of all instructorsassociated with a department with budget of greater than $95,000.selectinstructor.ID,department.dept\nnamefrominstructor,departmentwhereinstructor.dept\nname=department.dept\nnameanddepartment.budget>95000;If the above query were run on the tables in Figure 1.2, the system would ﬁndthat there are two departments with budget of greater than $95,000—ComputerScience and Finance; there are ﬁve instructors in these departments. Thus, theresult will consist of a table with two columns (ID,dept']",I don't know. The provided context does not include specific information about the number of professors in the 'instructor' table.,The information of 12 professors is stored in the instructor table.,0.0,0.0,0.0,0.0,0.2177334362335584
14,"In the department table, which dept_name is with budget over 90000?","['dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', 'dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', 'dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', 'dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', 'dept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000\n(b) ThedepartmenttableFigure 1.2As a m p l er e l a t i o n a ld a t a b a s e .associated with the Physics department. In Chapter 8, we shall study how todistinguish good schema designs from bad schema designs.1.5.2 Data-Manipulation LanguageTheSQLquery language is nonprocedural. A query takes as input several tables(possibly only one) and always returns a single table. Here is an example of anSQLquery that ﬁnds the names of all instructors in the History department:selectinstructor.namefrominstructorwhereinstructor.dept\nname=’History’;The query speciﬁes that those rows from the tableinstructorwhere thedept\nnameisHistory must be retrieved, and thenameattribute of these rows must be displayed.More speciﬁcally, the result of executing this query is a table with a single column', '1.5Relational Databases13\nID\nname\ndept\nname\nsalary\n22222\nEinstein\nPhysics\n95000\n12121\nWu\nFinance\n90000\n32343\nEl Said\nHistory\n60000\n45565\nKatz\nComp. Sci.\n75000\n98345\nKim\nElec. Eng.\n80000\n76766\nCrick\nBiology\n72000\n10101\nSrinivasan\nComp. Sci.\n65000\n58583\nCaliﬁeri\nHistory\n62000\n83821\nBrandt\nComp. Sci.\n92000\n15151\nMozart\nMusic\n40000\n33456\nGold\nPhysics\n87000\n76543\nSingh\nFinance\n80000\n(a) Theinstructortable\ndept\nname\nbuilding\nbudget\nComp. Sci.\nTaylor\n100000\nBiology\nWatson\n90000\nElec. Eng.\nTaylor\n85000\nMusic\nPackard\n80000\nFinance\nPainter\n120000\nHistory\nPainter\n50000\nPhysics\nWatson\n70000']","The dept_names with a budget over 90000 in the department table are ""Comp. Sci."" and ""Finance.""",3 dept_name have more than 9000 budget.,0.9747342373996887,0.9999999999833333,,0.0,0.21583164179438108
